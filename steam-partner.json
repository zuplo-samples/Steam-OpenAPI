{
  "openapi": "3.0.0",
  "info": {
    "title": "Steam Publisher Web API",
    "description": "Learn how to get your API Key from [here](https://partner.steamgames.com/doc/webapi_overview/auth)",
    "version": "1.0.0"
  },
  "paths": {
    "/IBroadcastService/PostGameDataFrame/v1": {
      "post": {
        "summary": "Add a game meta data frame to broadcast",
        "description": "Performs the PostGameDataFrame operation",
        "operationId": "IBroadcastService_PostGameDataFrame",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "broadcast_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "frame_data",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ICSGOPlayers_730/GetPlayerProfileCoin/v1": {
      "get": {
        "summary": "GetPlayerProfileCoin operation of ICSGOPlayers_730",
        "description": "Performs the GetPlayerProfileCoin operation",
        "operationId": "ICSGOPlayers_730_GetPlayerProfileCoin",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "The steam ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "coin",
            "in": "query",
            "description": "The coin",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IChatRoomService/AppAddUsersToGroup/v1": {
      "post": {
        "summary": "App invite player(s) to a chat room that it controls, or just extend invite(s)",
        "description": "Performs the AppAddUsersToGroup operation",
        "operationId": "IChatRoomService_AppAddUsersToGroup",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chat_group_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamids",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "suppress_log_messages",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IChatRoomService/AppPostSystemMessageToGroup/v1": {
      "post": {
        "summary": "App invite a player to a chat room that it controls, or just extend an invite",
        "description": "Performs the AppPostSystemMessageToGroup operation",
        "operationId": "IChatRoomService_AppPostSystemMessageToGroup",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "chat_group_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "message",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loc_token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "params",
            "in": "query",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IChatRoomService/AppRemoveUsersFromGroup/v1": {
      "post": {
        "summary": "App remove player(s) from a chat room that it controls",
        "description": "Performs the AppRemoveUsersFromGroup operation",
        "operationId": "IChatRoomService_AppRemoveUsersFromGroup",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chat_group_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid_targets",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "kick_expiration",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid_kick_actor",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "suppress_log_messages",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IChatRoomService/CreateAppChatRoomGroup/v1": {
      "post": {
        "summary": "App creating a chat room and inviting players to it",
        "description": "Performs the CreateAppChatRoomGroup operation",
        "operationId": "IChatRoomService_CreateAppChatRoomGroup",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid_owner",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "room_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IChatRoomService/SetAppChatRoomConfig/v1": {
      "post": {
        "summary": "Update the display and rules properties for an app-created chat room",
        "description": "Performs the SetAppChatRoomConfig operation",
        "operationId": "IChatRoomService_SetAppChatRoomConfig",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chat_group_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "avatar_ugc_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "allow_user_invites",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ICheatReportingService/EndSecureMultiplayerSession/v1": {
      "post": {
        "summary": "Tell the VAC servers that a secure multiplayer session has ended.",
        "description": "Performs the EndSecureMultiplayerSession operation",
        "operationId": "ICheatReportingService_EndSecureMultiplayerSession",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "steamid of the user.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The appid the user is playing.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "description": "session id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ICheatReportingService/GetCheatingReports/v1": {
      "get": {
        "summary": "Get a list of cheating reports submitted for this app",
        "description": "Performs the GetCheatingReports operation",
        "operationId": "ICheatReportingService_GetCheatingReports",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The appid.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "timeend",
            "in": "query",
            "description": "The beginning of the time range .",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "timebegin",
            "in": "query",
            "description": "The end of the time range.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "reportidmin",
            "in": "query",
            "description": "Minimum reportID to include",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "includereports",
            "in": "query",
            "description": "Include reports.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includebans",
            "in": "query",
            "description": "Include ban requests.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "Query just for this steamid.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ICheatReportingService/RemovePlayerGameBan/v1": {
      "post": {
        "summary": "Remove a ban on a player",
        "description": "Performs the RemovePlayerGameBan operation",
        "operationId": "ICheatReportingService_RemovePlayerGameBan",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "steamid of the user who is reported as cheating.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The appid.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ICheatReportingService/ReportPlayerCheating/v1": {
      "post": {
        "summary": "Reports a player cheating",
        "description": "Performs the ReportPlayerCheating operation",
        "operationId": "ICheatReportingService_ReportPlayerCheating",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "steamid of the user who is reported as cheating.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The appid.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamidreporter",
            "in": "query",
            "description": "steamid of the user or game server who is reporting the cheating.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appdata",
            "in": "query",
            "description": "App specific data about the cheating.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "heuristic",
            "in": "query",
            "description": "extra information about the source of the cheating - was it a heuristic.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "detection",
            "in": "query",
            "description": "extra information about the source of the cheating - was it a detection.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "playerreport",
            "in": "query",
            "description": "extra information about the source of the cheating - was it a player report.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "noreportid",
            "in": "query",
            "description": "dont return report id",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "gamemode",
            "in": "query",
            "description": "extra information about state of game - was it a specific type of game play (0 = generic)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "suspicionstarttime",
            "in": "query",
            "description": "extra information indicating how far back the game thinks is interesting for this user",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "severity",
            "in": "query",
            "description": "level of severity of bad action being reported",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "matchid",
            "in": "query",
            "description": "matchid to identify the game instance",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cheating_type",
            "in": "query",
            "description": "app specific data about the type of cheating",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appdata2",
            "in": "query",
            "description": "App specific data about the cheating.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "infraction_time",
            "in": "query",
            "description": "Time when the cheating occured",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "raw_report",
            "in": "query",
            "description": "Raw report data",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ICheatReportingService/RequestPlayerGameBan/v1": {
      "post": {
        "summary": "Requests a ban on a player",
        "description": "Performs the RequestPlayerGameBan operation",
        "operationId": "ICheatReportingService_RequestPlayerGameBan",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "steamid of the user who is reported as cheating.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The appid.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "reportid",
            "in": "query",
            "description": "The reportid originally used to report cheating.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cheatdescription",
            "in": "query",
            "description": "Text describing cheating infraction.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "duration",
            "in": "query",
            "description": "Ban duration requested in seconds.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "delayban",
            "in": "query",
            "description": "Delay the ban according to default ban delay rules.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "flags",
            "in": "query",
            "description": "Additional information about the ban request.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "invisible_ban",
            "in": "query",
            "description": "The ban will be recorded but not be visible or deny access to secure servers.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ICheatReportingService/RequestVacStatusForUser/v1": {
      "post": {
        "summary": "Checks a user's VAC session status. If verification fails, then do not let the user matchmake into a secure game.",
        "description": "Performs the RequestVacStatusForUser operation",
        "operationId": "ICheatReportingService_RequestVacStatusForUser",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "steamid of the user.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The appid the user is playing.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "description": "session id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "session_flags",
            "in": "query",
            "description": "session flags",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ICheatReportingService/StartSecureMultiplayerSession/v1": {
      "post": {
        "summary": "Tell the VAC servers that a secure multiplayer session has started",
        "description": "Performs the StartSecureMultiplayerSession operation",
        "operationId": "ICheatReportingService_StartSecureMultiplayerSession",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "steamid of the user.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The appid the user is playing.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IContentFilteringService/FilterStrings/v1": {
      "get": {
        "summary": "Filter a list of strings in the requested language with rules that match the client.",
        "description": "Performs the FilterStrings operation",
        "operationId": "IContentFilteringService_FilterStrings",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID that is asking to having filtering performed.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "In which language should filtering be performed. If empty, no profanity filtering will be performed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "legal_filtering_country",
            "in": "query",
            "description": "If set to an ISO 3166-1 Alpha-2 country code that requires legal filtering, that legal filtering will be performed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "raw_strings",
            "in": "query",
            "description": "The list of strings to be filtered.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_name",
            "in": "query",
            "description": "True if the strings are names instead of chat text",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The SteamID of the person viewing the text",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconMarketService/CancelAppListingsForUser/v1": {
      "post": {
        "summary": "Cancels all of a user's listings for a specific app ID.",
        "description": "Performs the CancelAppListingsForUser operation",
        "operationId": "IEconMarketService_CancelAppListingsForUser",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The app making the request",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The SteamID of the user whose listings should be canceled",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "synchronous",
            "in": "query",
            "description": "Whether or not to wait until all listings have been canceled before returning the response",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vac",
            "in": "query",
            "description": "This was in response to a VAC ban?",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconMarketService/GetAssetID/v1": {
      "get": {
        "summary": "Returns the asset ID of the item sold in a listing",
        "description": "Performs the GetAssetID operation",
        "operationId": "IEconMarketService_GetAssetID",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The app that's asking. Must match the app of the listing and must belong to the publisher group that owns the API key making the request",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "listingid",
            "in": "query",
            "description": "The identifier of the listing to get information for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconMarketService/GetMarketEligibility/v1": {
      "get": {
        "summary": "Checks whether or not an account is allowed to use the market",
        "description": "Performs the GetMarketEligibility operation",
        "operationId": "IEconMarketService_GetMarketEligibility",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The SteamID of the user to check",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconMarketService/GetPopular/v1": {
      "get": {
        "summary": "Gets the most popular items",
        "description": "Performs the GetPopular operation",
        "operationId": "IEconMarketService_GetPopular",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "The language to use in item descriptions",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rows",
            "in": "query",
            "description": "Number of rows per page",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The result number to start at",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "filter_appid",
            "in": "query",
            "description": "If present, the app ID to limit results to",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ecurrency",
            "in": "query",
            "description": "If present, prices returned will be represented in this currency",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconMarketService/LearnItem/v1": {
      "post": {
        "summary": "Teaches the market about a kind of item that may be listed on the market in the future.",
        "description": "Performs the LearnItem operation",
        "operationId": "IEconMarketService_LearnItem",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The app the item belongs to",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "class_name",
            "in": "query",
            "description": "Asset class property names",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "class_value",
            "in": "query",
            "description": "Asset class property value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconService/FlushAssetAppearanceCache/v1": {
      "post": {
        "summary": "Flushes the display cache for assets.  This will result in calls to GetAssetClassInfo for each asset class the next time it is displayed.",
        "description": "Performs the FlushAssetAppearanceCache operation",
        "operationId": "IEconService_FlushAssetAppearanceCache",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconService/FlushContextCache/v1": {
      "post": {
        "summary": "Flushes the cache of inventory contents. This will result in calls to GetContexts and GetContextContents to get fresh data for each user next time Steam needs their inventory.",
        "description": "Performs the FlushContextCache operation",
        "operationId": "IEconService_FlushContextCache",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconService/FlushInventoryCache/v1": {
      "post": {
        "summary": "Flushes the cache for a user's inventory in a specific app context",
        "description": "Performs the FlushInventoryCache operation",
        "operationId": "IEconService_FlushInventoryCache",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "User to clear cache for.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "App to clear cache for.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "contextid",
            "in": "query",
            "description": "Context to clear cache for.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameInventory/GetHistoryCommandDetails/v1": {
      "get": {
        "summary": "GetHistoryCommandDetails operation of IGameInventory",
        "description": "Performs the GetHistoryCommandDetails operation",
        "operationId": "IGameInventory_GetHistoryCommandDetails",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "appid of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The steam ID of the account to operate on",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "command",
            "in": "query",
            "description": "The command to run on that asset",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contextid",
            "in": "query",
            "description": "The context to fetch history for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "arguments",
            "in": "query",
            "description": "The arguments that were provided with the command in the first place",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameInventory/GetUserHistory/v1": {
      "get": {
        "summary": "GetUserHistory operation of IGameInventory",
        "description": "Performs the GetUserHistory operation",
        "operationId": "IGameInventory_GetUserHistory",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "appid of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The Steam ID to fetch history for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "contextid",
            "in": "query",
            "description": "The context to fetch history for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "starttime",
            "in": "query",
            "description": "Start time of the history range to collect",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "endtime",
            "in": "query",
            "description": "End time of the history range to collect",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameInventory/HistoryExecuteCommands/v1": {
      "post": {
        "summary": "HistoryExecuteCommands operation of IGameInventory",
        "description": "Performs the HistoryExecuteCommands operation",
        "operationId": "IGameInventory_HistoryExecuteCommands",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "appid of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The asset ID to operate on",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "contextid",
            "in": "query",
            "description": "The context to fetch history for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "actorid",
            "in": "query",
            "description": "A unique 32 bit ID for the support person executing the command",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameInventory/SupportGetAssetHistory/v1": {
      "get": {
        "summary": "SupportGetAssetHistory operation of IGameInventory",
        "description": "Performs the SupportGetAssetHistory operation",
        "operationId": "IGameInventory_SupportGetAssetHistory",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "appid of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "assetid",
            "in": "query",
            "description": "The asset ID to operate on",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "contextid",
            "in": "query",
            "description": "The context to fetch history for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameNotificationsService/CreateSession/v1": {
      "post": {
        "summary": "Creates an async game session",
        "description": "Performs the CreateSession operation",
        "operationId": "IGameNotificationsService_CreateSession",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The appid to create the session for.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Game-specified context value the game can used to associate the session with some object on their backend.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title of the session to be displayed within each user's list of sessions.",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "users",
            "in": "query",
            "description": "The initial state of all users in the session.",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameNotificationsService/DeleteSession/v1": {
      "post": {
        "summary": "Deletes an async game session",
        "description": "Performs the DeleteSession operation",
        "operationId": "IGameNotificationsService_DeleteSession",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionid",
            "in": "query",
            "description": "The sessionid to delete.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The appid of the session to delete.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "steamid to make the request on behalf of -- if specified, the user must be in the session.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameNotificationsService/DeleteSessionBatch/v1": {
      "post": {
        "summary": "Deletes a batch of async game sessions",
        "description": "Performs the DeleteSessionBatch operation",
        "operationId": "IGameNotificationsService_DeleteSessionBatch",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionid",
            "in": "query",
            "description": "The sessionid to delete.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The appid of the session to delete.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameNotificationsService/EnumerateSessionsForApp/v1": {
      "get": {
        "summary": "Enumerates a user's sessions",
        "description": "Performs the EnumerateSessionsForApp operation",
        "operationId": "IGameNotificationsService_EnumerateSessionsForApp",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The sessionid to request details for. Optional. If not specified, all the user's sessions will be returned.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The user whose sessions are to be enumerated.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_all_user_messages",
            "in": "query",
            "description": "Boolean determining whether the message for all users should be included. Defaults to false.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_auth_user_message",
            "in": "query",
            "description": "Boolean determining whether the message for the authenticated user should be included. Defaults to false.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "Language to localize the text in.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameNotificationsService/GetSessionDetailsForApp/v1": {
      "get": {
        "summary": "Get the details for a specific session",
        "description": "Performs the GetSessionDetailsForApp operation",
        "operationId": "IGameNotificationsService_GetSessionDetailsForApp",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessions",
            "in": "query",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The appid for the sessions.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "Language to localize the text in.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameNotificationsService/RequestNotifications/v1": {
      "post": {
        "summary": "Requests that a user receive game notifications for an app",
        "description": "Performs the RequestNotifications operation",
        "operationId": "IGameNotificationsService_RequestNotifications",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The steamid to request notifications for.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The appid to request notifications for.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameNotificationsService/UpdateSession/v1": {
      "post": {
        "summary": "Updates a game session",
        "description": "Performs the UpdateSession operation",
        "operationId": "IGameNotificationsService_UpdateSession",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionid",
            "in": "query",
            "description": "The sessionid to update.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The appid of the session to update.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The new title of the session.  If not specified, the title will not be changed.",
            "required": false,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "users",
            "in": "query",
            "description": "A list of users whose state will be updated to reflect the given state. If the users are not already in the session, they will be added to it.",
            "required": false,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameServersService/SetBanStatus/v1": {
      "post": {
        "summary": "performs a GSLT ban/unban of GSLT associated with a GS. If banning, also bans associated users' GSLTs.",
        "description": "Performs the SetBanStatus operation",
        "operationId": "IGameServersService_SetBanStatus",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "banned",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ban_seconds",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IInventoryService/AddItem/v1": {
      "post": {
        "summary": "Adds an item to a user's inventory",
        "description": "Performs the AddItem operation",
        "operationId": "IInventoryService_AddItem",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemdefid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itempropsjson",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemquantity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "notify",
            "in": "query",
            "description": "Should notify the user that the item was added to their Steam Inventory.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "requestid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "trade_restriction",
            "in": "query",
            "description": "If true, apply the default trade and market restriction times to this item.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_purchase",
            "in": "query",
            "description": "If set, treat requestid as a txnid and create this item as a result of user microtransaction purchase.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IInventoryService/AddPromoItem/v1": {
      "post": {
        "summary": "Adds a promo item to a user's inventory",
        "description": "Performs the AddPromoItem operation",
        "operationId": "IInventoryService_AddPromoItem",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemdefid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itempropsjson",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemquantity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "notify",
            "in": "query",
            "description": "Should notify the user that the item was added to their Steam Inventory.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "requestid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "trade_restriction",
            "in": "query",
            "description": "If true, apply the default trade and market restriction times to this item.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_purchase",
            "in": "query",
            "description": "If set, treat requestid as a txnid and create this item as a result of user microtransaction purchase.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IInventoryService/Consolidate/v1": {
      "post": {
        "summary": "Consolidate items of the given type within an user's inventory",
        "description": "Performs the Consolidate operation",
        "operationId": "IInventoryService_Consolidate",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemdefid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IInventoryService/ConsolidateAll/v1": {
      "post": {
        "summary": "Consolidate all items within an user's inventory",
        "description": "Performs the ConsolidateAll operation",
        "operationId": "IInventoryService_ConsolidateAll",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IInventoryService/ExchangeItem/v1": {
      "post": {
        "summary": "Craft an item in a user's inventory",
        "description": "Performs the ExchangeItem operation",
        "operationId": "IInventoryService_ExchangeItem",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "materialsitemid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "materialsquantity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "outputitemdefid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IInventoryService/GetAddItemHistory/v1": {
      "get": {
        "summary": "Gets a list of items that have been added to accounts",
        "description": "Performs the GetAddItemHistory operation",
        "operationId": "IInventoryService_GetAddItemHistory",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "max_results",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "start_highwater",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "start_timestamp",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IInventoryService/GetInventory/v1": {
      "get": {
        "summary": "Retrieves a users inventory as a big JSON blob",
        "description": "Performs the GetInventory operation",
        "operationId": "IInventoryService_GetInventory",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IInventoryService/GetItemDefs/v1": {
      "get": {
        "summary": "Get item definitions",
        "description": "Performs the GetItemDefs operation",
        "operationId": "IInventoryService_GetItemDefs",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "modifiedsince",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemdefids",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "workshopids",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cache_max_age_seconds",
            "in": "query",
            "description": "Allow stale data to be returned for the specified number of seconds.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IInventoryService/GetQuantity/v1": {
      "get": {
        "summary": "Get the total number of available items of the given type",
        "description": "Performs the GetQuantity operation",
        "operationId": "IInventoryService_GetQuantity",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemdefid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IInventoryService/ModifyItems/v1": {
      "post": {
        "summary": "Modify an item in a user's inventory",
        "description": "Performs the ModifyItems operation",
        "operationId": "IInventoryService_ModifyItems",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "updates",
            "in": "query",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ILobbyMatchmakingService/CreateLobby/v1": {
      "post": {
        "summary": "Creates a lobby and sets its related lobby data",
        "description": "Performs the CreateLobby operation",
        "operationId": "ILobbyMatchmakingService_CreateLobby",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "max_members",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "lobby_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "lobby_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid_invited_members",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "lobby_metadata",
            "in": "query",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ILobbyMatchmakingService/GetLobbyData/v1": {
      "get": {
        "summary": "Returns lobby data and member list",
        "description": "Performs the GetLobbyData operation",
        "operationId": "ILobbyMatchmakingService_GetLobbyData",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid_lobby",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ILobbyMatchmakingService/RemoveUserFromLobby/v1": {
      "post": {
        "summary": "Removes a user from a lobby",
        "description": "Performs the RemoveUserFromLobby operation",
        "operationId": "ILobbyMatchmakingService_RemoveUserFromLobby",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid_lobby",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid_to_remove",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IOnlinePlayService/GetCoPlayStatus/v1": {
      "post": {
        "summary": "Get coplay status for two accounts",
        "description": "Performs the GetCoPlayStatus operation",
        "operationId": "IOnlinePlayService_GetCoPlayStatus",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "Steam ID 1 of request",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid2",
            "in": "query",
            "description": "Steam ID 2 of request",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "App ID of request",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "time_range_begin",
            "in": "query",
            "description": "unix time range begin to check",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "time_range_end",
            "in": "query",
            "description": "unix time range end to check",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IProductInfoService/SetRichPresenceLocalization/v1": {
      "post": {
        "summary": "Save and commit rich presence localization for the given app",
        "description": "Performs the SetRichPresenceLocalization operation",
        "operationId": "IProductInfoService_SetRichPresenceLocalization",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "languages",
            "in": "query",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPublishedFileService/Delete/v1": {
      "post": {
        "summary": "Deletes a published file.",
        "description": "Performs the Delete operation",
        "operationId": "IPublishedFileService_Delete",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "publishedfileid",
            "in": "query",
            "description": "Published file id of the file we'd like to delete.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPublishedFileService/RefreshVotingQueue/v1": {
      "post": {
        "summary": "Refresh the voting queue for the user",
        "description": "Performs the RefreshVotingQueue operation",
        "operationId": "IPublishedFileService_RefreshVotingQueue",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "matching_file_type",
            "in": "query",
            "description": "EPublishedFileInfoMatchingFileType",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Include files that have all the tags or any of the tags if match_all_tags is set to false.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "match_all_tags",
            "in": "query",
            "description": "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "excluded_tags",
            "in": "query",
            "description": "Exclude any files that have any of these tags.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "desired_queue_size",
            "in": "query",
            "description": "Desired number of items in the voting queue.  May be clamped by the server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "desired_revision",
            "in": "query",
            "description": "Filter to items that have data for the specified revision.",
            "required": false,
            "schema": {
              "type": "epublishedfilerevision"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPublishedFileService/SetDeveloperMetadata/v1": {
      "post": {
        "summary": "Sets the metadata for a developer on the published file",
        "description": "Performs the SetDeveloperMetadata operation",
        "operationId": "IPublishedFileService_SetDeveloperMetadata",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "publishedfileid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPublishedFileService/UpdateAppUGCBan/v1": {
      "post": {
        "summary": "Adds/updates/removes a UGC ban in the app",
        "description": "Performs the UpdateAppUGCBan operation",
        "operationId": "IPublishedFileService_UpdateAppUGCBan",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "expiration_time",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPublishedFileService/UpdateBanStatus/v1": {
      "post": {
        "summary": "Updates the ban status on the item",
        "description": "Performs the UpdateBanStatus operation",
        "operationId": "IPublishedFileService_UpdateBanStatus",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "publishedfileid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "banned",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPublishedFileService/UpdateIncompatibleStatus/v1": {
      "post": {
        "summary": "Update the incompatible status on the item",
        "description": "Performs the UpdateIncompatibleStatus operation",
        "operationId": "IPublishedFileService_UpdateIncompatibleStatus",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "publishedfileid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "incompatible",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPublishedFileService/UpdateKeyValueTags/v1": {
      "post": {
        "summary": "Updates key/value tags for a published file",
        "description": "Performs the UpdateKeyValueTags operation",
        "operationId": "IPublishedFileService_UpdateKeyValueTags",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "publishedfileid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "tags_to_add",
            "in": "query",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "tags_to_remove",
            "in": "query",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "string_tags_to_remove_by_key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "int_tags_to_remove_by_key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPublishedFileService/UpdateTags/v1": {
      "post": {
        "summary": "Updates tags on the published file",
        "description": "Performs the UpdateTags operation",
        "operationId": "IPublishedFileService_UpdateTags",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "publishedfileid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "add_tags",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "remove_tags",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "schema": {
              "type": "elanguage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPublishedFileService/Vote/v1": {
      "post": {
        "summary": "User wants to vote on the item",
        "description": "Performs the Vote operation",
        "operationId": "IPublishedFileService_Vote",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "publishedfileid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "vote_up",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IQuestService/PublisherAddCommunityItemsToPlayer/v1": {
      "post": {
        "summary": "Add game items to a user",
        "description": "Performs the PublisherAddCommunityItemsToPlayer operation",
        "operationId": "IQuestService_PublisherAddCommunityItemsToPlayer",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "match_item_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "match_item_class",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "prefix_item_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributes",
            "in": "query",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "note",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "broadcast_channel_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamApps/GetAppBetas/v1": {
      "get": {
        "summary": "GetAppBetas operation of ISteamApps",
        "description": "Performs the GetAppBetas operation",
        "operationId": "ISteamApps_GetAppBetas",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamApps/GetAppBuilds/v1": {
      "get": {
        "summary": "GetAppBuilds operation of ISteamApps",
        "description": "Performs the GetAppBuilds operation",
        "operationId": "ISteamApps_GetAppBuilds",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "# of builds to retrieve (default 10)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "depot_details",
            "in": "query",
            "description": "True if we want the info on the depots in each build.  False if we don't need that info.  Defaults to true.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamApps/GetAppDepotVersions/v1": {
      "get": {
        "summary": "GetAppDepotVersions operation of ISteamApps",
        "description": "Performs the GetAppDepotVersions operation",
        "operationId": "ISteamApps_GetAppDepotVersions",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of depot",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamApps/GetCheatingReports/v1": {
      "get": {
        "summary": "GetCheatingReports operation of ISteamApps",
        "description": "Performs the GetCheatingReports operation",
        "operationId": "ISteamApps_GetCheatingReports",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "timebegin",
            "in": "query",
            "description": "Time range begin",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "timeend",
            "in": "query",
            "description": "Time range end",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "includereports",
            "in": "query",
            "description": "include reports that were not bans",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includebans",
            "in": "query",
            "description": "include reports that were bans",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "reportidmin",
            "in": "query",
            "description": "minimum report id",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamApps/GetPartnerAppListForWebAPIKey/v2": {
      "get": {
        "summary": "GetPartnerAppListForWebAPIKey operation of ISteamApps",
        "description": "Performs the GetPartnerAppListForWebAPIKey operation",
        "operationId": "ISteamApps_GetPartnerAppListForWebAPIKey",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type_filter",
            "in": "query",
            "description": "Filter app results by type. Can be comman separated, eg: games,dlc",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamApps/GetPlayersBanned/v1": {
      "get": {
        "summary": "GetPlayersBanned operation of ISteamApps",
        "description": "Performs the GetPlayersBanned operation",
        "operationId": "ISteamApps_GetPlayersBanned",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamApps/GetServerList/v1": {
      "get": {
        "summary": "GetServerList operation of ISteamApps",
        "description": "Performs the GetServerList operation",
        "operationId": "ISteamApps_GetServerList",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Query filter string",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number of servers in the response",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamApps/SetAppBuildLive/v2": {
      "post": {
        "summary": "SetAppBuildLive operation of ISteamApps",
        "description": "Performs the SetAppBuildLive operation",
        "operationId": "ISteamApps_SetAppBuildLive",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "buildid",
            "in": "query",
            "description": "BuildID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "betakey",
            "in": "query",
            "description": "beta key, required. Use public for default branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user approving build change, required for public branches of released apps",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "optional description for this build",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamApps/UpdateAppBranchDescription/v1": {
      "post": {
        "summary": "UpdateAppBranchDescription operation of ISteamApps",
        "description": "Performs the UpdateAppBranchDescription operation",
        "operationId": "ISteamApps_UpdateAppBranchDescription",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "betakey",
            "in": "query",
            "description": "Beta branch name, required. Will not update default branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description for this beta branch, required",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamCommunity/ReportAbuse/v1": {
      "post": {
        "summary": "ReportAbuse operation of ISteamCommunity",
        "description": "Performs the ReportAbuse operation",
        "operationId": "ISteamCommunity_ReportAbuse",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamidActor",
            "in": "query",
            "description": "SteamID of user doing the reporting",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamidTarget",
            "in": "query",
            "description": "SteamID of the entity being accused of abuse",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID to check for ownership",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "abuseType",
            "in": "query",
            "description": "Abuse type code (see EAbuseReportType enum)",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "contentType",
            "in": "query",
            "description": "Content type code (see ECommunityContentType enum)",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Narrative from user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gid",
            "in": "query",
            "description": "GID of related record (depends on content type)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamEconomy/CanTrade/v1": {
      "get": {
        "summary": "CanTrade operation of ISteamEconomy",
        "description": "Performs the CanTrade operation",
        "operationId": "ISteamEconomy_CanTrade",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "That the key is associated with. Must be a steam economy app.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user attempting to initiate a trade",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "targetid",
            "in": "query",
            "description": "SteamID of user that is the target of the trade invitation",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamEconomy/FinalizeAssetTransaction/v1": {
      "post": {
        "summary": "FinalizeAssetTransaction operation of ISteamEconomy",
        "description": "Performs the FinalizeAssetTransaction operation",
        "operationId": "ISteamEconomy_FinalizeAssetTransaction",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "The app ID the user is buying assets for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of the user making a purchase",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "txnid",
            "in": "query",
            "description": "The transaction ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "The local language for the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamEconomy/GetExportedAssetsForUser/v1": {
      "get": {
        "summary": "GetExportedAssetsForUser operation of ISteamEconomy",
        "description": "Performs the GetExportedAssetsForUser operation",
        "operationId": "ISteamEconomy_GetExportedAssetsForUser",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The app to get exported items from.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "contextid",
            "in": "query",
            "description": "The context in the app to get exported items from.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamEconomy/GetMarketPrices/v1": {
      "get": {
        "summary": "GetMarketPrices operation of ISteamEconomy",
        "description": "Performs the GetMarketPrices operation",
        "operationId": "ISteamEconomy_GetMarketPrices",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "Must be a steam economy app.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamEconomy/StartAssetTransaction/v1": {
      "post": {
        "summary": "StartAssetTransaction operation of ISteamEconomy",
        "description": "Performs the StartAssetTransaction operation",
        "operationId": "ISteamEconomy_StartAssetTransaction",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "The app ID the user is buying assets for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user making a purchase",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "assetid0",
            "in": "query",
            "description": "The ID of the first asset the user is buying - there must be at least one",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetquantity0",
            "in": "query",
            "description": "The quantity of assetid0's the the user is buying",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "The local currency for the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "The local language for the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ipaddress",
            "in": "query",
            "description": "The user's IP address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referrer",
            "in": "query",
            "description": "The referring URL",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientauth",
            "in": "query",
            "description": "If true (default is false), the authorization will appear in the user's steam client overlay, rather than as a web page - useful for stores that are embedded in products.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamEconomy/StartTrade/v1": {
      "get": {
        "summary": "StartTrade operation of ISteamEconomy",
        "description": "Performs the StartTrade operation",
        "operationId": "ISteamEconomy_StartTrade",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "That the key is associated with. Must be a steam economy app.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "partya",
            "in": "query",
            "description": "SteamID of first user in the trade",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "partyb",
            "in": "query",
            "description": "SteamID of second user in the trade",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamGameServerStats/GetGameServerPlayerStatsForGame/v1": {
      "get": {
        "summary": "GetGameServerPlayerStatsForGame operation of ISteamGameServerStats",
        "description": "Performs the GetGameServerPlayerStatsForGame operation",
        "operationId": "ISteamGameServerStats_GetGameServerPlayerStatsForGame",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gameid",
            "in": "query",
            "description": "game id to get stats for, if not a mod, it's safe to use appid here",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "appID of the game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "rangestart",
            "in": "query",
            "description": "range start date/time (Format: YYYY-MM-DD HH:MM:SS, seattle local time",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rangeend",
            "in": "query",
            "description": "range end date/time (Format: YYYY-MM-DD HH:MM:SS, seattle local time",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxresults",
            "in": "query",
            "description": "Max number of results to return (up to 1000)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamLeaderboards/DeleteLeaderboard/v1": {
      "post": {
        "summary": "DeleteLeaderboard operation of ISteamLeaderboards",
        "description": "Performs the DeleteLeaderboard operation",
        "operationId": "ISteamLeaderboards_DeleteLeaderboard",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "appid of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "name of the leaderboard to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamLeaderboards/DeleteLeaderboardScore/v1": {
      "post": {
        "summary": "DeleteLeaderboardScore operation of ISteamLeaderboards",
        "description": "Performs the DeleteLeaderboardScore operation",
        "operationId": "ISteamLeaderboards_DeleteLeaderboardScore",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "appid of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "leaderboardid",
            "in": "query",
            "description": "numeric ID of the target leaderboard. Can be retrieved from GetLeaderboardsForGame",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "steamID to set the score for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamLeaderboards/FindOrCreateLeaderboard/v2": {
      "post": {
        "summary": "FindOrCreateLeaderboard operation of ISteamLeaderboards",
        "description": "Performs the FindOrCreateLeaderboard operation",
        "operationId": "ISteamLeaderboards_FindOrCreateLeaderboard",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "appid of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "name of the leaderboard to create",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortmethod",
            "in": "query",
            "description": "sort method to use for this leaderboard (defaults to Ascending)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "displaytype",
            "in": "query",
            "description": "display type for this leaderboard (defaults to Numeric)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createifnotfound",
            "in": "query",
            "description": "if this is true the leaderboard will be created if it doesn't exist. Defaults to true.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "onlytrustedwrites",
            "in": "query",
            "description": "if this is true the leaderboard scores cannot be set by clients, and can only be set by publisher via SetLeaderboardScore WebAPI. Defaults to false.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "onlyfriendsreads",
            "in": "query",
            "description": "if this is true the leaderboard scores can only be read for friends by clients, scores can always be read by publisher. Defaults to false.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "onlyusersinsameparty",
            "in": "query",
            "description": "if this is true the leaderboard scores for SteamIDs can only be read for party members, scores can always be read by publisher. Defaults to false.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limitrangearounduser",
            "in": "query",
            "description": "limit the range of rows around user. Zero means unlimited. -1 means disabled. Positive is plus/minus limit. Defaults to zero.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limitglobaltopentries",
            "in": "query",
            "description": "limit the top of the leaderboard. Zero means unlimited. -1 means disabled. Positive is limit to TOP(N). Defaults to zero.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamLeaderboards/GetLeaderboardEntries/v1": {
      "get": {
        "summary": "GetLeaderboardEntries operation of ISteamLeaderboards",
        "description": "Performs the GetLeaderboardEntries operation",
        "operationId": "ISteamLeaderboards_GetLeaderboardEntries",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "appid of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "rangestart",
            "in": "query",
            "description": "range start or 0",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "rangeend",
            "in": "query",
            "description": "range end or max LB entries",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID used for friend & around user requests",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "leaderboardid",
            "in": "query",
            "description": "ID of the leaderboard to view",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "datarequest",
            "in": "query",
            "description": "type of request: RequestGlobal, RequestAroundUser, RequestFriends",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamLeaderboards/GetLeaderboardsForGame/v2": {
      "get": {
        "summary": "GetLeaderboardsForGame operation of ISteamLeaderboards",
        "description": "Performs the GetLeaderboardsForGame operation",
        "operationId": "ISteamLeaderboards_GetLeaderboardsForGame",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "appid of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamLeaderboards/ModifyLeaderboardScoreMulti/v1": {
      "post": {
        "summary": "ModifyLeaderboardScoreMulti operation of ISteamLeaderboards",
        "description": "Performs the ModifyLeaderboardScoreMulti operation",
        "operationId": "ISteamLeaderboards_ModifyLeaderboardScoreMulti",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "appid of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "steamID to set the score for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "score",
            "in": "query",
            "description": "the score to set for this user",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "scoremethod",
            "in": "query",
            "description": "update method to use. Can be \"KeepBest\" or \"ForceUpdate\"",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "details",
            "in": "query",
            "description": "game-specific details for how the score was earned. Up to 256 bytes.",
            "required": false,
            "schema": {
              "type": "rawbinary"
            }
          },
          {
            "name": "leaderboardid_del",
            "in": "query",
            "description": "Numeric ID of the target leaderboard to delete user scores from. Multiple leaderboards supported by numbering sequentially [0], [1], [2], ... Leaderboards be retrieved from GetLeaderboardsForGame.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "leaderboardid_del[1]",
            "in": "query",
            "description": "Numeric ID of the target leaderboard to delete user scores from. Multiple leaderboards supported by numbering sequentially [0], [1], [2], ... Leaderboards be retrieved from GetLeaderboardsForGame.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "leaderboardid_set",
            "in": "query",
            "description": "Numeric ID of the target leaderboard to set user scores into. Multiple leaderboards supported by numbering sequentially [0], [1], [2], ... Scores are set after all delete operations complete. Leaderboards be retrieved from GetLeaderboardsForGame.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "leaderboardid_set[1]",
            "in": "query",
            "description": "Numeric ID of the target leaderboard to set user scores into. Multiple leaderboards supported by numbering sequentially [0], [1], [2], ... Scores are set after all delete operations complete. Leaderboards be retrieved from GetLeaderboardsForGame.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamLeaderboards/ResetLeaderboard/v1": {
      "post": {
        "summary": "ResetLeaderboard operation of ISteamLeaderboards",
        "description": "Performs the ResetLeaderboard operation",
        "operationId": "ISteamLeaderboards_ResetLeaderboard",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "appid of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "leaderboardid",
            "in": "query",
            "description": "numeric ID of the target leaderboard. Can be retrieved from GetLeaderboardsForGame",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamLeaderboards/SetLeaderboardScore/v1": {
      "post": {
        "summary": "SetLeaderboardScore operation of ISteamLeaderboards",
        "description": "Performs the SetLeaderboardScore operation",
        "operationId": "ISteamLeaderboards_SetLeaderboardScore",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "appid of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "leaderboardid",
            "in": "query",
            "description": "numeric ID of the target leaderboard. Can be retrieved from GetLeaderboardsForGame",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "steamID to set the score for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "score",
            "in": "query",
            "description": "the score to set for this user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "scoremethod",
            "in": "query",
            "description": "update method to use. Can be \"KeepBest\" or \"ForceUpdate\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "details",
            "in": "query",
            "description": "game-specific details for how the score was earned. Up to 256 bytes.",
            "required": false,
            "schema": {
              "type": "rawbinary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamMicroTxn/AdjustAgreement/v1": {
      "post": {
        "summary": "AdjustAgreement operation of ISteamMicroTxn",
        "description": "Performs the AdjustAgreement operation",
        "operationId": "ISteamMicroTxn_AdjustAgreement",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user with the agreement",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "agreementid",
            "in": "query",
            "description": "ID of agreement",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "nextprocessdate",
            "in": "query",
            "description": "Date for next process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamMicroTxn/CancelAgreement/v1": {
      "post": {
        "summary": "CancelAgreement operation of ISteamMicroTxn",
        "description": "Performs the CancelAgreement operation",
        "operationId": "ISteamMicroTxn_CancelAgreement",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user with the agreement",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "agreementid",
            "in": "query",
            "description": "ID of agreement",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamMicroTxn/FinalizeTxn/v2": {
      "post": {
        "summary": "FinalizeTxn operation of ISteamMicroTxn",
        "description": "Performs the FinalizeTxn operation",
        "operationId": "ISteamMicroTxn_FinalizeTxn",
        "parameters": [
          {
            "name": "orderid",
            "in": "query",
            "description": "3rd party ID for transaction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game this transaction is for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamMicroTxn/GetReport/v5": {
      "get": {
        "summary": "GetReport operation of ISteamMicroTxn",
        "description": "Performs the GetReport operation",
        "operationId": "ISteamMicroTxn_GetReport",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game this transaction is for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Report type (GAMESALES, STEAMSTORE, SETTLEMENT)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "Beginning time to start report from (RFC 3339 UTC format)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxresults",
            "in": "query",
            "description": "Max number of results to return (up to 1000)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamMicroTxn/GetUserAgreementInfo/v2": {
      "get": {
        "summary": "GetUserAgreementInfo operation of ISteamMicroTxn",
        "description": "Performs the GetUserAgreementInfo operation",
        "operationId": "ISteamMicroTxn_GetUserAgreementInfo",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user making purchase",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamMicroTxn/GetUserInfo/v2": {
      "get": {
        "summary": "GetUserInfo operation of ISteamMicroTxn",
        "description": "Performs the GetUserInfo operation",
        "operationId": "ISteamMicroTxn_GetUserInfo",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user making purchase",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ipaddress",
            "in": "query",
            "description": "ip address of user in string format (xxx.xxx.xxx.xxx). Only required if usersession=web",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game this transaction is for",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamMicroTxn/InitTxn/v3": {
      "post": {
        "summary": "InitTxn operation of ISteamMicroTxn",
        "description": "Performs the InitTxn operation",
        "operationId": "ISteamMicroTxn_InitTxn",
        "parameters": [
          {
            "name": "orderid",
            "in": "query",
            "description": "3rd party ID for transaction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user making purchase",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game this transaction is for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemcount",
            "in": "query",
            "description": "Number of items in cart",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "ISO 639-1 language code of description",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "ISO 4217 currency code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "usersession",
            "in": "query",
            "description": "session where user will authorize the transaction. client or web (defaults to client)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ipaddress",
            "in": "query",
            "description": "ip address of user in string format (xxx.xxx.xxx.xxx). Only required if usersession=web",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemid",
            "in": "query",
            "description": "3rd party ID for item",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "qty",
            "in": "query",
            "description": "Quantity of this item",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "amount",
            "in": "query",
            "description": "Total cost (in cents) of item(s)",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of item",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Optional category grouping for item",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "associated_bundle",
            "in": "query",
            "description": "Optional bundleid of associated bundle",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "billingtype",
            "in": "query",
            "description": "Optional recurring billing type",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Optional start date for recurring billing",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "Optional end date for recurring billing",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Optional period for recurring billing",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "frequency",
            "in": "query",
            "description": "Optional frequency for recurring billing",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "recurringamt",
            "in": "query",
            "description": "Optional recurring billing amount",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "bundlecount",
            "in": "query",
            "description": "Number of bundles in cart",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "bundleid",
            "in": "query",
            "description": "3rd party ID of the bundle. This shares the same ID space as 3rd party items.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "bundle_qty",
            "in": "query",
            "description": "Quantity of this bundle",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "bundle_desc",
            "in": "query",
            "description": "Description of bundle",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "bundle_category",
            "in": "query",
            "description": "Optional category grouping for bundle",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamMicroTxn/ProcessAgreement/v1": {
      "post": {
        "summary": "ProcessAgreement operation of ISteamMicroTxn",
        "description": "Performs the ProcessAgreement operation",
        "operationId": "ISteamMicroTxn_ProcessAgreement",
        "parameters": [
          {
            "name": "orderid",
            "in": "query",
            "description": "3rd party ID for transaction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user with the agreement",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "agreementid",
            "in": "query",
            "description": "ID of agreement",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "amount",
            "in": "query",
            "description": "Total cost (in cents) to charge",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "ISO 4217 currency code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamMicroTxn/QueryTxn/v3": {
      "get": {
        "summary": "QueryTxn operation of ISteamMicroTxn",
        "description": "Performs the QueryTxn operation",
        "operationId": "ISteamMicroTxn_QueryTxn",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game this transaction is for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "orderid",
            "in": "query",
            "description": "3rd party ID for transaction",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "transid",
            "in": "query",
            "description": "Steam transaction ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamMicroTxn/RefundTxn/v2": {
      "post": {
        "summary": "RefundTxn operation of ISteamMicroTxn",
        "description": "Performs the RefundTxn operation",
        "operationId": "ISteamMicroTxn_RefundTxn",
        "parameters": [
          {
            "name": "orderid",
            "in": "query",
            "description": "3rd party ID for transaction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game this transaction is for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamMicroTxnSandbox/AdjustAgreement/v1": {
      "post": {
        "summary": "AdjustAgreement operation of ISteamMicroTxnSandbox",
        "description": "Performs the AdjustAgreement operation",
        "operationId": "ISteamMicroTxnSandbox_AdjustAgreement",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user with the agreement",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "agreementid",
            "in": "query",
            "description": "ID of agreement",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "nextprocessdate",
            "in": "query",
            "description": "Date for next process",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamMicroTxnSandbox/CancelAgreement/v1": {
      "post": {
        "summary": "CancelAgreement operation of ISteamMicroTxnSandbox",
        "description": "Performs the CancelAgreement operation",
        "operationId": "ISteamMicroTxnSandbox_CancelAgreement",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user with the agreement",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "agreementid",
            "in": "query",
            "description": "ID of agreement",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamMicroTxnSandbox/FinalizeTxn/v2": {
      "post": {
        "summary": "FinalizeTxn operation of ISteamMicroTxnSandbox",
        "description": "Performs the FinalizeTxn operation",
        "operationId": "ISteamMicroTxnSandbox_FinalizeTxn",
        "parameters": [
          {
            "name": "orderid",
            "in": "query",
            "description": "3rd party ID for transaction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game this transaction is for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamMicroTxnSandbox/GetReport/v5": {
      "get": {
        "summary": "GetReport operation of ISteamMicroTxnSandbox",
        "description": "Performs the GetReport operation",
        "operationId": "ISteamMicroTxnSandbox_GetReport",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game this transaction is for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Report type (GAMESALES, STEAMSTORE, SETTLEMENT)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "Beginning time to start report from (RFC 3339 UTC format)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxresults",
            "in": "query",
            "description": "Max number of results to return (up to 1000)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamMicroTxnSandbox/GetUserAgreementInfo/v2": {
      "get": {
        "summary": "GetUserAgreementInfo operation of ISteamMicroTxnSandbox",
        "description": "Performs the GetUserAgreementInfo operation",
        "operationId": "ISteamMicroTxnSandbox_GetUserAgreementInfo",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user making purchase",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamMicroTxnSandbox/GetUserInfo/v2": {
      "get": {
        "summary": "GetUserInfo operation of ISteamMicroTxnSandbox",
        "description": "Performs the GetUserInfo operation",
        "operationId": "ISteamMicroTxnSandbox_GetUserInfo",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user making purchase",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ipaddress",
            "in": "query",
            "description": "ip address of user in string format (xxx.xxx.xxx.xxx). Only required if usersession=web",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game this transaction is for",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamMicroTxnSandbox/InitTxn/v3": {
      "post": {
        "summary": "InitTxn operation of ISteamMicroTxnSandbox",
        "description": "Performs the InitTxn operation",
        "operationId": "ISteamMicroTxnSandbox_InitTxn",
        "parameters": [
          {
            "name": "orderid",
            "in": "query",
            "description": "3rd party ID for transaction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user making purchase",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game this transaction is for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemcount",
            "in": "query",
            "description": "Number of items in cart",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "ISO 639-1 language code of description",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "ISO 4217 currency code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemid",
            "in": "query",
            "description": "3rd party ID for item",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "qty",
            "in": "query",
            "description": "Quantity of this item",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "amount",
            "in": "query",
            "description": "Total cost (in cents) of item(s)",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of item",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Optional category grouping for item",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "billingtype",
            "in": "query",
            "description": "Optional recurring billing type",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Optional start date for recurring billing",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "Optional end date for recurring billing",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Optional period for recurring billing",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "frequency",
            "in": "query",
            "description": "Optional frequency for recurring billing",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "recurringamt",
            "in": "query",
            "description": "Optional recurring billing amount",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamMicroTxnSandbox/ProcessAgreement/v1": {
      "post": {
        "summary": "ProcessAgreement operation of ISteamMicroTxnSandbox",
        "description": "Performs the ProcessAgreement operation",
        "operationId": "ISteamMicroTxnSandbox_ProcessAgreement",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user with the agreement",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "agreementid",
            "in": "query",
            "description": "ID of agreement",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "amount",
            "in": "query",
            "description": "Total cost (in cents) to charge",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "ISO 4217 currency code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamMicroTxnSandbox/QueryTxn/v3": {
      "get": {
        "summary": "QueryTxn operation of ISteamMicroTxnSandbox",
        "description": "Performs the QueryTxn operation",
        "operationId": "ISteamMicroTxnSandbox_QueryTxn",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game this transaction is for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "orderid",
            "in": "query",
            "description": "3rd party ID for transaction",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "transid",
            "in": "query",
            "description": "Steam transaction ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamMicroTxnSandbox/RefundTxn/v2": {
      "post": {
        "summary": "RefundTxn operation of ISteamMicroTxnSandbox",
        "description": "Performs the RefundTxn operation",
        "operationId": "ISteamMicroTxnSandbox_RefundTxn",
        "parameters": [
          {
            "name": "orderid",
            "in": "query",
            "description": "3rd party ID for transaction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game this transaction is for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamNews/GetNewsForAppAuthed/v2": {
      "get": {
        "summary": "GetNewsForAppAuthed operation of ISteamNews",
        "description": "Performs the GetNewsForAppAuthed operation",
        "operationId": "ISteamNews_GetNewsForAppAuthed",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID to retrieve news for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "maxlength",
            "in": "query",
            "description": "Maximum length for the content to return, if this is 0 the full content is returned, if it's less then a blurb is generated to fit.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "Retrieve posts earlier than this date (unix epoch timestamp)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "# of posts to retrieve (default 20)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "feeds",
            "in": "query",
            "description": "Comma-seperated list of feed names to return news for",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Comma-separated list of tags to filter by (e.g. 'patchnodes')",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamPublishedItemSearch/RankedByPublicationOrder/v1": {
      "post": {
        "summary": "RankedByPublicationOrder operation of ISteamPublishedItemSearch",
        "description": "Performs the RankedByPublicationOrder operation",
        "operationId": "ISteamPublishedItemSearch_RankedByPublicationOrder",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "appID of product",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "startidx",
            "in": "query",
            "description": "Starting index in the result set (0 based)",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number Requested",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "tagcount",
            "in": "query",
            "description": "Number of Tags Specified",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "usertagcount",
            "in": "query",
            "description": "Number of User specific tags requested",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "hasappadminaccess",
            "in": "query",
            "description": "Whether the user making the request is an admin for the app and can see private files",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileType",
            "in": "query",
            "description": "EPublishedFileInfoMatchingFileType, defaults to k_PFI_MatchingFileType_Items",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Tag to filter result set",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "usertag",
            "in": "query",
            "description": "A user specific tag",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamPublishedItemSearch/RankedByTrend/v1": {
      "post": {
        "summary": "RankedByTrend operation of ISteamPublishedItemSearch",
        "description": "Performs the RankedByTrend operation",
        "operationId": "ISteamPublishedItemSearch_RankedByTrend",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "appID of product",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "startidx",
            "in": "query",
            "description": "Starting index in the result set (0 based)",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number Requested",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "tagcount",
            "in": "query",
            "description": "Number of Tags Specified",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "usertagcount",
            "in": "query",
            "description": "Number of User specific tags requested",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "hasappadminaccess",
            "in": "query",
            "description": "Whether the user making the request is an admin for the app and can see private files",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileType",
            "in": "query",
            "description": "EPublishedFileInfoMatchingFileType, defaults to k_PFI_MatchingFileType_Items",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "days",
            "in": "query",
            "description": "[1,7] number of days for the trend period, including today",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Tag to filter result set",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "usertag",
            "in": "query",
            "description": "A user specific tag",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamPublishedItemSearch/RankedByVote/v1": {
      "post": {
        "summary": "RankedByVote operation of ISteamPublishedItemSearch",
        "description": "Performs the RankedByVote operation",
        "operationId": "ISteamPublishedItemSearch_RankedByVote",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "appID of product",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "startidx",
            "in": "query",
            "description": "Starting index in the result set (0 based)",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number Requested",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "tagcount",
            "in": "query",
            "description": "Number of Tags Specified",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "usertagcount",
            "in": "query",
            "description": "Number of User specific tags requested",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "hasappadminaccess",
            "in": "query",
            "description": "Whether the user making the request is an admin for the app and can see private files",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileType",
            "in": "query",
            "description": "EPublishedFileInfoMatchingFileType, defaults to k_PFI_MatchingFileType_Items",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Tag to filter result set",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "usertag",
            "in": "query",
            "description": "A user specific tag",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamPublishedItemSearch/ResultSetSummary/v1": {
      "post": {
        "summary": "ResultSetSummary operation of ISteamPublishedItemSearch",
        "description": "Performs the ResultSetSummary operation",
        "operationId": "ISteamPublishedItemSearch_ResultSetSummary",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "appID relevant to all subsequent tags",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "tagcount",
            "in": "query",
            "description": "Number of Tags Specified",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "usertagcount",
            "in": "query",
            "description": "Number of User specific tags requested",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "hasappadminaccess",
            "in": "query",
            "description": "Whether the user making the request is an admin for the app and can see private files",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileType",
            "in": "query",
            "description": "EPublishedFileInfoMatchingFileType, defaults to k_PFI_MatchingFileType_Items",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Tag to filter result set",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "usertag",
            "in": "query",
            "description": "A user specific tag",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamPublishedItemVoting/ItemVoteSummary/v1": {
      "post": {
        "summary": "ItemVoteSummary operation of ISteamPublishedItemVoting",
        "description": "Performs the ItemVoteSummary operation",
        "operationId": "ISteamPublishedItemVoting_ItemVoteSummary",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "Steam ID of user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "appID of product",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Count of how many items we are querying",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "publishedfileid",
            "in": "query",
            "description": "The Published File ID who's vote details are required",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamPublishedItemVoting/UserVoteSummary/v1": {
      "post": {
        "summary": "UserVoteSummary operation of ISteamPublishedItemVoting",
        "description": "Performs the UserVoteSummary operation",
        "operationId": "ISteamPublishedItemVoting_UserVoteSummary",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "Steam ID of user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Count of how many items we are querying",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "publishedfileid",
            "in": "query",
            "description": "A Specific Published Item",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamRemoteStorage/EnumerateUserSubscribedFiles/v1": {
      "post": {
        "summary": "EnumerateUserSubscribedFiles operation of ISteamRemoteStorage",
        "description": "Performs the EnumerateUserSubscribedFiles operation",
        "operationId": "ISteamRemoteStorage_EnumerateUserSubscribedFiles",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "appID of product",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "listtype",
            "in": "query",
            "description": "EUCMListType",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamRemoteStorage/SetUGCUsedByGC/v1": {
      "post": {
        "summary": "SetUGCUsedByGC operation of ISteamRemoteStorage",
        "description": "Performs the SetUGCUsedByGC operation",
        "operationId": "ISteamRemoteStorage_SetUGCUsedByGC",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ugcid",
            "in": "query",
            "description": "ID of UGC file whose bits are being fiddled with",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "appID of product to change updating state for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "used",
            "in": "query",
            "description": "New state of flag",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamRemoteStorage/SubscribePublishedFile/v1": {
      "post": {
        "summary": "SubscribePublishedFile operation of ISteamRemoteStorage",
        "description": "Performs the SubscribePublishedFile operation",
        "operationId": "ISteamRemoteStorage_SubscribePublishedFile",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "appID of product",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "publishedfileid",
            "in": "query",
            "description": "published file id to subscribe to",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamRemoteStorage/UnsubscribePublishedFile/v1": {
      "post": {
        "summary": "UnsubscribePublishedFile operation of ISteamRemoteStorage",
        "description": "Performs the UnsubscribePublishedFile operation",
        "operationId": "ISteamRemoteStorage_UnsubscribePublishedFile",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "appID of product",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "publishedfileid",
            "in": "query",
            "description": "published file id to unsubscribe from",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamSpecialSurvey/CheckUserStatus/v1": {
      "get": {
        "summary": "CheckUserStatus operation of ISteamSpecialSurvey",
        "description": "Performs the CheckUserStatus operation",
        "operationId": "ISteamSpecialSurvey_CheckUserStatus",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "appid of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "surveyid",
            "in": "query",
            "description": "ID of the survey being taken",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of the user taking the survey",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "Survey identity verification token for the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamSpecialSurvey/SetUserFinished/v1": {
      "post": {
        "summary": "SetUserFinished operation of ISteamSpecialSurvey",
        "description": "Performs the SetUserFinished operation",
        "operationId": "ISteamSpecialSurvey_SetUserFinished",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "appid of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "surveyid",
            "in": "query",
            "description": "ID of the survey being taken",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of the user taking the survey",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "Survey identity verification token for the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamUser/CheckAppOwnership/v3": {
      "get": {
        "summary": "CheckAppOwnership operation of ISteamUser",
        "description": "Performs the CheckAppOwnership operation",
        "operationId": "ISteamUser_CheckAppOwnership",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID to check for ownership",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamUser/GetAppPriceInfo/v1": {
      "get": {
        "summary": "GetAppPriceInfo operation of ISteamUser",
        "description": "Performs the GetAppPriceInfo operation",
        "operationId": "ISteamUser_GetAppPriceInfo",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appids",
            "in": "query",
            "description": "Comma-delimited list of appids (max: 100)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamUser/GetPublisherAppOwnership/v4": {
      "get": {
        "summary": "GetPublisherAppOwnership operation of ISteamUser",
        "description": "Performs the GetPublisherAppOwnership operation",
        "operationId": "ISteamUser_GetPublisherAppOwnership",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamUser/GetPublisherAppOwnershipChanges/v1": {
      "get": {
        "summary": "GetPublisherAppOwnershipChanges operation of ISteamUser",
        "description": "Performs the GetPublisherAppOwnershipChanges operation",
        "operationId": "ISteamUser_GetPublisherAppOwnershipChanges",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packagerowversion",
            "in": "query",
            "description": "The unsigned 64-bit row version to read package changes from. The row version of data read up to will be returned for use in future calls.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdkeyrowversion",
            "in": "query",
            "description": "The unsigned 64-bit row version to read CD Key changes from. The row version of data read up to will be returned for use in future calls.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamUser/GrantPackage/v3": {
      "post": {
        "summary": "GrantPackage operation of ISteamUser",
        "description": "Performs the GrantPackage operation",
        "operationId": "ISteamUser_GrantPackage",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "packageid",
            "in": "query",
            "description": "PackageID to grant",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ipaddress",
            "in": "query",
            "description": "ip address of user in string format (xxx.xxx.xxx.xxx).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "thirdpartykey",
            "in": "query",
            "description": "Optionally associate third party key during grant. 'thirdpartyappid' will have to be set.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "thirdpartyappid",
            "in": "query",
            "description": "Has to be set if 'thirdpartykey' is set. The appid associated with the 'thirdpartykey'.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamUser/RevokePackage/v1": {
      "post": {
        "summary": "RevokePackage operation of ISteamUser",
        "description": "Performs the RevokePackage operation",
        "operationId": "ISteamUser_RevokePackage",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "packageid",
            "in": "query",
            "description": "PackageID to grant",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "revokereason",
            "in": "query",
            "description": "Reason for why to revoke",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamUserStats/SetUserStatsForGame/v1": {
      "post": {
        "summary": "SetUserStatsForGame operation of ISteamUserStats",
        "description": "Performs the SetUserStatsForGame operation",
        "operationId": "ISteamUserStats_SetUserStatsForGame",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "appid of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of stats and achievements to set a value for (name/value param pairs)",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of stat or achievement to set",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Value to set",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamWorkshop/AssociateWorkshopItems/v1": {
      "post": {
        "summary": "AssociateWorkshopItems operation of ISteamWorkshop",
        "description": "Performs the AssociateWorkshopItems operation",
        "operationId": "ISteamWorkshop_AssociateWorkshopItems",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game this transaction is for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemcount",
            "in": "query",
            "description": "Number of items to associate",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "publishedfileid",
            "in": "query",
            "description": "the workshop published file id",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "gameitemid",
            "in": "query",
            "description": "3rd party ID for item",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "revenuepercentage",
            "in": "query",
            "description": "Percentage of revenue the owners of the workshop item will get from the sale of the item [0.0, 100.0].  For bundle-like items, send over an entry for each item in the bundle (gameitemid = bundle id) with different publishedfileids and with the revenue percentage pre-split amongst the items in the bundle (i.e. 30% / 10 items in the bundle)",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          },
          {
            "name": "gameitemdescription",
            "in": "query",
            "description": "Game's description of the game item",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamWorkshop/GetContributors/v1": {
      "post": {
        "summary": "GetContributors operation of ISteamWorkshop",
        "description": "Performs the GetContributors operation",
        "operationId": "ISteamWorkshop_GetContributors",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game this transaction is for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ITestExternalPrivilegeService/CallPublisherKey/v1": {
      "post": {
        "summary": "CallPublisherKey operation of ITestExternalPrivilegeService",
        "description": "Performs the CallPublisherKey operation",
        "operationId": "ITestExternalPrivilegeService_CallPublisherKey",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ITestExternalPrivilegeService/CallPublisherKeyOwnsApp/v1": {
      "post": {
        "summary": "CallPublisherKeyOwnsApp operation of ITestExternalPrivilegeService",
        "description": "Performs the CallPublisherKeyOwnsApp operation",
        "operationId": "ITestExternalPrivilegeService_CallPublisherKeyOwnsApp",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IVACManagementService/GameModuleLoadReport/v1": {
      "post": {
        "summary": "GameModuleLoadReport",
        "description": "Performs the GameModuleLoadReport operation",
        "operationId": "IVACManagementService_GameModuleLoadReport",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "file_report",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "total_files",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "process_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "internal_error",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "command_line",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "insecure",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "launch_report",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "diagnostics",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid_reporter",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IWorkshopService/AddSpecialPayment/v1": {
      "post": {
        "summary": "Add a special payment for an appid/gameitemid.",
        "description": "Performs the AddSpecialPayment operation",
        "operationId": "IWorkshopService_AddSpecialPayment",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "gameitemid",
            "in": "query",
            "description": "Game Item ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "YYY-MM-DD formatted string",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_us_usd",
            "in": "query",
            "description": "US Payment portion in USD Cents",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "payment_row_usd",
            "in": "query",
            "description": "ROW Payment portion in USD Cents",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IWorkshopService/GetFinalizedContributors/v1": {
      "get": {
        "summary": "Get a list of contributors for a specific gameitemid/app combination.",
        "description": "Performs the GetFinalizedContributors operation",
        "operationId": "IWorkshopService_GetFinalizedContributors",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "gameitemid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IWorkshopService/GetItemDailyRevenue/v1": {
      "get": {
        "summary": "Get item revenue for a specific app/item definition for a date range.",
        "description": "Performs the GetItemDailyRevenue operation",
        "operationId": "IWorkshopService_GetItemDailyRevenue",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "item_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "date_start",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "date_end",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IWorkshopService/PopulateItemDescriptions/v1": {
      "post": {
        "summary": "Populate block of item descriptions.",
        "description": "Performs the PopulateItemDescriptions operation",
        "operationId": "IWorkshopService_PopulateItemDescriptions",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "languages",
            "in": "query",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IWorkshopService/SetItemPaymentRules/v1": {
      "post": {
        "summary": "Set item payment rules.",
        "description": "Performs the SetItemPaymentRules operation",
        "operationId": "IWorkshopService_SetItemPaymentRules",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "gameitemid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "associated_workshop_files",
            "in": "query",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "partner_accounts",
            "in": "query",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "validate_only",
            "in": "query",
            "description": "Only validates the rules and does not persist them.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "make_workshop_files_subscribable",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "associated_workshop_file_for_direct_payments",
            "in": "query",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://partner.steam-api.com"
    }
  ]
}
