{
  "openapi": "3.0.0",
  "info": {
    "title": "Steam Web API",
    "description": "Get your API key from [here](https://steamcommunity.com/dev/apikey)",
    "version": "1.0.0"
  },
  "paths": {
    "/IAuthenticationService/BeginAuthSessionViaCredentials/v1": {
      "post": {
        "summary": "start authentication process",
        "description": "Performs the BeginAuthSessionViaCredentials operation",
        "operationId": "IAuthenticationService_BeginAuthSessionViaCredentials",
        "parameters": [
          {
            "name": "device_friendly_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "encrypted_password",
            "in": "query",
            "description": "password, RSA encrypted client side",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "encryption_timestamp",
            "in": "query",
            "description": "timestamp to map to a key - STime",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "remember_login",
            "in": "query",
            "description": "deprecated",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "platform_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "{enum}"
            }
          },
          {
            "name": "persistence",
            "in": "query",
            "description": "whether we are requesting a persistent or an ephemeral session",
            "required": false,
            "schema": {
              "type": "{enum}"
            }
          },
          {
            "name": "website_id",
            "in": "query",
            "description": "(EMachineAuthWebDomain) identifier of client requesting auth",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "device_details",
            "in": "query",
            "description": "User-supplied details about the device attempting to sign in",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "guard_data",
            "in": "query",
            "description": "steam guard data for client login",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "qos_level",
            "in": "query",
            "description": "[ENetQOSLevel] client-specified priority for this auth attempt",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IAuthenticationService/BeginAuthSessionViaQR/v1": {
      "post": {
        "summary": "start authentication process",
        "description": "Performs the BeginAuthSessionViaQR operation",
        "operationId": "IAuthenticationService_BeginAuthSessionViaQR",
        "parameters": [
          {
            "name": "device_friendly_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "platform_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "{enum}"
            }
          },
          {
            "name": "device_details",
            "in": "query",
            "description": "User-supplied details about the device attempting to sign in",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "website_id",
            "in": "query",
            "description": "(EMachineAuthWebDomain) identifier of client requesting auth",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IAuthenticationService/GetAuthSessionInfo/v1": {
      "post": {
        "summary": "get metadata of specific auth session, this will also implicitly bind the calling account",
        "description": "Performs the GetAuthSessionInfo operation",
        "operationId": "IAuthenticationService_GetAuthSessionInfo",
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "client ID from scanned QR Code, used for routing",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IAuthenticationService/GetAuthSessionRiskInfo/v1": {
      "post": {
        "summary": "get risk metadata for a specific auth session that has been deemed risky",
        "description": "Performs the GetAuthSessionRiskInfo operation",
        "operationId": "IAuthenticationService_GetAuthSessionRiskInfo",
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "client ID from scanned QR Code, used for routing",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "language for optimistic localization of geoloc data",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IAuthenticationService/GetPasswordRSAPublicKey/v1": {
      "get": {
        "summary": "Fetches RSA public key to use to encrypt passwords for a given account name",
        "description": "Performs the GetPasswordRSAPublicKey operation",
        "operationId": "IAuthenticationService_GetPasswordRSAPublicKey",
        "parameters": [
          {
            "name": "account_name",
            "in": "query",
            "description": "user-provided account name to get an RSA key for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IAuthenticationService/PollAuthSessionStatus/v1": {
      "post": {
        "summary": "poll during authentication process",
        "description": "Performs the PollAuthSessionStatus operation",
        "operationId": "IAuthenticationService_PollAuthSessionStatus",
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "request_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token_to_revoke",
            "in": "query",
            "description": "If this is set to a token owned by this user, that token will be retired",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IAuthenticationService/UpdateAuthSessionWithMobileConfirmation/v1": {
      "post": {
        "summary": "approve an authentication session via mobile 2fa",
        "description": "Performs the UpdateAuthSessionWithMobileConfirmation operation",
        "operationId": "IAuthenticationService_UpdateAuthSessionWithMobileConfirmation",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "version field",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "pending client ID, from scanned QR Code",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "user who wants to login",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "signature",
            "in": "query",
            "description": "HMAC digest over {version,client_id,steamid} via user's private key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "confirm",
            "in": "query",
            "description": "Whether to confirm the login (true) or deny the login (false)",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "persistence",
            "in": "query",
            "description": "whether we are requesting a persistent or an ephemeral session",
            "required": false,
            "schema": {
              "type": "{enum}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IAuthenticationService/UpdateAuthSessionWithSteamGuardCode/v1": {
      "post": {
        "summary": "approve an authentication session via steam guard code",
        "description": "Performs the UpdateAuthSessionWithSteamGuardCode operation",
        "operationId": "IAuthenticationService_UpdateAuthSessionWithSteamGuardCode",
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "description": "pending client ID, from initialized session",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "user who wants to login",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "confirmation code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code_type",
            "in": "query",
            "description": "type of confirmation code",
            "required": true,
            "schema": {
              "type": "{enum}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IBroadcastService/PostGameDataFrameRTMP/v1": {
      "post": {
        "summary": "Add a game meta data frame to broadcast from a client. Uses RTMP token for validation",
        "description": "Performs the PostGameDataFrameRTMP operation",
        "operationId": "IBroadcastService_PostGameDataFrameRTMP",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of the game being broadcasted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "Broadcasters SteamID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "rtmp_token",
            "in": "query",
            "description": "Valid RTMP token for the Broadcaster",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "frame_data",
            "in": "query",
            "description": "game data frame expressing current state of game (string, zipped, whatever)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ICSGOPlayers_730/GetNextMatchSharingCode/v1": {
      "get": {
        "summary": "GetNextMatchSharingCode operation of ICSGOPlayers_730",
        "description": "Performs the GetNextMatchSharingCode operation",
        "operationId": "ICSGOPlayers_730_GetNextMatchSharingCode",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "The SteamID of the user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamidkey",
            "in": "query",
            "description": "Authentication obtained from the SteamID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "knowncode",
            "in": "query",
            "description": "Previously known match sharing code obtained from the SteamID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ICSGOServers_730/GetGameMapsPlaytime/v1": {
      "get": {
        "summary": "GetGameMapsPlaytime operation of ICSGOServers_730",
        "description": "Performs the GetGameMapsPlaytime operation",
        "operationId": "ICSGOServers_730_GetGameMapsPlaytime",
        "parameters": [
          {
            "name": "interval",
            "in": "query",
            "description": "What recent interval is requested, possible values: day, week, month",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gamemode",
            "in": "query",
            "description": "What game mode is requested, possible values: competitive, casual",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mapgroup",
            "in": "query",
            "description": "What maps are requested, possible values: operation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ICSGOServers_730/GetGameServersStatus/v1": {
      "get": {
        "summary": "GetGameServersStatus operation of ICSGOServers_730",
        "description": "Performs the GetGameServersStatus operation",
        "operationId": "ICSGOServers_730_GetGameServersStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ICSGOTournaments_730/GetTournamentFantasyLineup/v1": {
      "get": {
        "summary": "GetTournamentFantasyLineup operation of ICSGOTournaments_730",
        "description": "Performs the GetTournamentFantasyLineup operation",
        "operationId": "ICSGOTournaments_730_GetTournamentFantasyLineup",
        "parameters": [
          {
            "name": "event",
            "in": "query",
            "description": "The event ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The SteamID of the user inventory",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamidkey",
            "in": "query",
            "description": "Authentication obtained from the SteamID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ICSGOTournaments_730/GetTournamentItems/v1": {
      "get": {
        "summary": "GetTournamentItems operation of ICSGOTournaments_730",
        "description": "Performs the GetTournamentItems operation",
        "operationId": "ICSGOTournaments_730_GetTournamentItems",
        "parameters": [
          {
            "name": "event",
            "in": "query",
            "description": "The event ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The SteamID of the user inventory",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamidkey",
            "in": "query",
            "description": "Authentication obtained from the SteamID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ICSGOTournaments_730/GetTournamentLayout/v1": {
      "get": {
        "summary": "GetTournamentLayout operation of ICSGOTournaments_730",
        "description": "Performs the GetTournamentLayout operation",
        "operationId": "ICSGOTournaments_730_GetTournamentLayout",
        "parameters": [
          {
            "name": "event",
            "in": "query",
            "description": "The event ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ICSGOTournaments_730/GetTournamentPredictions/v1": {
      "get": {
        "summary": "GetTournamentPredictions operation of ICSGOTournaments_730",
        "description": "Performs the GetTournamentPredictions operation",
        "operationId": "ICSGOTournaments_730_GetTournamentPredictions",
        "parameters": [
          {
            "name": "event",
            "in": "query",
            "description": "The event ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The SteamID of the user inventory",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamidkey",
            "in": "query",
            "description": "Authentication obtained from the SteamID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ICSGOTournaments_730/UploadTournamentFantasyLineup/v1": {
      "post": {
        "summary": "UploadTournamentFantasyLineup operation of ICSGOTournaments_730",
        "description": "Performs the UploadTournamentFantasyLineup operation",
        "operationId": "ICSGOTournaments_730_UploadTournamentFantasyLineup",
        "parameters": [
          {
            "name": "event",
            "in": "query",
            "description": "The event ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The SteamID of the user inventory",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamidkey",
            "in": "query",
            "description": "Authentication obtained from the SteamID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sectionid",
            "in": "query",
            "description": "Event section id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pickid0",
            "in": "query",
            "description": "PickID to select for the slot",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemid0",
            "in": "query",
            "description": "ItemID to lock in for the pick",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pickid1",
            "in": "query",
            "description": "PickID to select for the slot",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemid1",
            "in": "query",
            "description": "ItemID to lock in for the pick",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pickid2",
            "in": "query",
            "description": "PickID to select for the slot",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemid2",
            "in": "query",
            "description": "ItemID to lock in for the pick",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pickid3",
            "in": "query",
            "description": "PickID to select for the slot",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemid3",
            "in": "query",
            "description": "ItemID to lock in for the pick",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pickid4",
            "in": "query",
            "description": "PickID to select for the slot",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemid4",
            "in": "query",
            "description": "ItemID to lock in for the pick",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ICSGOTournaments_730/UploadTournamentPredictions/v1": {
      "post": {
        "summary": "UploadTournamentPredictions operation of ICSGOTournaments_730",
        "description": "Performs the UploadTournamentPredictions operation",
        "operationId": "ICSGOTournaments_730_UploadTournamentPredictions",
        "parameters": [
          {
            "name": "event",
            "in": "query",
            "description": "The event ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The SteamID of the user inventory",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamidkey",
            "in": "query",
            "description": "Authentication obtained from the SteamID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sectionid",
            "in": "query",
            "description": "Event section id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "groupid",
            "in": "query",
            "description": "Event group id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "index",
            "in": "query",
            "description": "Index in group",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pickid",
            "in": "query",
            "description": "Pick ID to select",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemid",
            "in": "query",
            "description": "ItemID to lock in for the pick",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ICheatReportingService/ReportCheatData/v1": {
      "post": {
        "summary": "Reports cheat data. Only use on test account that is running the game but not in a multiplayer session.",
        "description": "Performs the ReportCheatData operation",
        "operationId": "ICheatReportingService_ReportCheatData",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "steamid of the user running and reporting the cheat.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The appid.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pathandfilename",
            "in": "query",
            "description": "path and file name of the cheat executable.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webcheaturl",
            "in": "query",
            "description": "web url where the cheat was found and downloaded.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "time_now",
            "in": "query",
            "description": "local system time now.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "time_started",
            "in": "query",
            "description": "local system time when cheat process started. ( 0 if not yet run )",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "time_stopped",
            "in": "query",
            "description": "local system time when cheat process stopped. ( 0 if still running )",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cheatname",
            "in": "query",
            "description": "descriptive name for the cheat.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "game_process_id",
            "in": "query",
            "description": "process ID of the running game.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cheat_process_id",
            "in": "query",
            "description": "process ID of the cheat process that ran",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cheat_param_1",
            "in": "query",
            "description": "cheat param 1",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cheat_param_2",
            "in": "query",
            "description": "cheat param 2",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cheat_data_dump",
            "in": "query",
            "description": "data collection in json format",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IClientStats_1046930/ReportEvent/v1": {
      "post": {
        "summary": "ReportEvent operation of IClientStats_1046930",
        "description": "Performs the ReportEvent operation",
        "operationId": "IClientStats_1046930_ReportEvent",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IContentServerConfigService/GetSteamCacheNodeParams/v1": {
      "get": {
        "summary": "Get the operational parameters for a SteamCache node (information the node uses to operate).",
        "description": "Performs the GetSteamCacheNodeParams operation",
        "operationId": "IContentServerConfigService_GetSteamCacheNodeParams",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cache_id",
            "in": "query",
            "description": "Unique ID number",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cache_key",
            "in": "query",
            "description": "Valid current cache API key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IContentServerConfigService/SetSteamCacheClientFilters/v1": {
      "post": {
        "summary": "Update the client filters for a SteamCache node",
        "description": "Performs the SetSteamCacheClientFilters operation",
        "operationId": "IContentServerConfigService_SetSteamCacheClientFilters",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cache_id",
            "in": "query",
            "description": "Unique ID number",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cache_key",
            "in": "query",
            "description": "Valid current cache API key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "change_notes",
            "in": "query",
            "description": "Notes",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowed_ip_blocks",
            "in": "query",
            "description": "comma-separated list of allowed IP address blocks in CIDR format - blank to clear unfilter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IContentServerConfigService/SetSteamCachePerformanceStats/v1": {
      "post": {
        "summary": "Update the performance/load stats for a SteamCache node",
        "description": "Performs the SetSteamCachePerformanceStats operation",
        "operationId": "IContentServerConfigService_SetSteamCachePerformanceStats",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cache_id",
            "in": "query",
            "description": "Unique ID number",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cache_key",
            "in": "query",
            "description": "Valid current cache API key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mbps_sent",
            "in": "query",
            "description": "Outgoing network traffic in Mbps",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "mbps_recv",
            "in": "query",
            "description": "Incoming network traffic in Mbps",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cpu_percent",
            "in": "query",
            "description": "Percent CPU load",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cache_hit_percent",
            "in": "query",
            "description": "Percent cache hits",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "num_connected_ips",
            "in": "query",
            "description": "Number of unique connected IP addresses",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "upstream_egress_utilization",
            "in": "query",
            "description": "(deprecated) What is the percent utilization of the busiest datacenter egress link?",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "upstream_peering_utilization",
            "in": "query",
            "description": "What is the percent utilization of the busiest peering link?",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "upstream_transit_utilization",
            "in": "query",
            "description": "What is the percent utilization of the busiest transit link?",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IContentServerDirectoryService/GetCDNForVideo/v1": {
      "get": {
        "summary": "GetCDNForVideo operation of IContentServerDirectoryService",
        "description": "Performs the GetCDNForVideo operation",
        "operationId": "IContentServerDirectoryService_GetCDNForVideo",
        "parameters": [
          {
            "name": "property_type",
            "in": "query",
            "description": "ECDNPropertyType",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "client_ip",
            "in": "query",
            "description": "client IP address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_region",
            "in": "query",
            "description": "client region",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IContentServerDirectoryService/GetClientUpdateHosts/v1": {
      "get": {
        "summary": "GetClientUpdateHosts operation of IContentServerDirectoryService",
        "description": "Performs the GetClientUpdateHosts operation",
        "operationId": "IContentServerDirectoryService_GetClientUpdateHosts",
        "parameters": [
          {
            "name": "cached_signature",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IContentServerDirectoryService/GetDepotPatchInfo/v1": {
      "get": {
        "summary": "GetDepotPatchInfo operation of IContentServerDirectoryService",
        "description": "Performs the GetDepotPatchInfo operation",
        "operationId": "IContentServerDirectoryService_GetDepotPatchInfo",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "depotid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "source_manifestid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "target_manifestid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IContentServerDirectoryService/GetServersForSteamPipe/v1": {
      "get": {
        "summary": "GetServersForSteamPipe operation of IContentServerDirectoryService",
        "description": "Performs the GetServersForSteamPipe operation",
        "operationId": "IContentServerDirectoryService_GetServersForSteamPipe",
        "parameters": [
          {
            "name": "cell_id",
            "in": "query",
            "description": "client Cell ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "max_servers",
            "in": "query",
            "description": "max servers in response list",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ip_override",
            "in": "query",
            "description": "client IP address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "launcher_type",
            "in": "query",
            "description": "launcher type",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ipv6_public",
            "in": "query",
            "description": "client public ipv6 address if it knows it",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "current_connections",
            "in": "query",
            "description": "what sources is the client currently using",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IContentServerDirectoryService/PickSingleContentServer/v1": {
      "get": {
        "summary": "PickSingleContentServer operation of IContentServerDirectoryService",
        "description": "Performs the PickSingleContentServer operation",
        "operationId": "IContentServerDirectoryService_PickSingleContentServer",
        "parameters": [
          {
            "name": "property_type",
            "in": "query",
            "description": "ECDNPropertyType",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cell_id",
            "in": "query",
            "description": "client Cell ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "client_ip",
            "in": "query",
            "description": "client IP address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IDOTA2MatchStats_570/GetRealtimeStats/v1": {
      "get": {
        "summary": "GetRealtimeStats operation of IDOTA2MatchStats_570",
        "description": "Performs the GetRealtimeStats operation",
        "operationId": "IDOTA2MatchStats_570_GetRealtimeStats",
        "parameters": [
          {
            "name": "server_steam_id",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IDOTA2Match_570/GetLiveLeagueGames/v1": {
      "get": {
        "summary": "GetLiveLeagueGames operation of IDOTA2Match_570",
        "description": "Performs the GetLiveLeagueGames operation",
        "operationId": "IDOTA2Match_570_GetLiveLeagueGames",
        "parameters": [
          {
            "name": "league_id",
            "in": "query",
            "description": "Only show matches of the specified league id",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "match_id",
            "in": "query",
            "description": "Only show matches of the specified match id",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "dpc",
            "in": "query",
            "description": "Only show matches that are part of the DPC",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IDOTA2Match_570/GetMatchDetails/v1": {
      "get": {
        "summary": "GetMatchDetails operation of IDOTA2Match_570",
        "description": "Performs the GetMatchDetails operation",
        "operationId": "IDOTA2Match_570_GetMatchDetails",
        "parameters": [
          {
            "name": "match_id",
            "in": "query",
            "description": "Match id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_persona_names",
            "in": "query",
            "description": "Include persona names as part of the response",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IDOTA2Match_570/GetMatchHistory/v1": {
      "get": {
        "summary": "GetMatchHistory operation of IDOTA2Match_570",
        "description": "Performs the GetMatchHistory operation",
        "operationId": "IDOTA2Match_570_GetMatchHistory",
        "parameters": [
          {
            "name": "hero_id",
            "in": "query",
            "description": "The ID of the hero that must be in the matches being queried",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "game_mode",
            "in": "query",
            "description": "Which game mode to return matches for",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "skill",
            "in": "query",
            "description": "The average skill range of the match, these can be [1-3] with lower numbers being lower skill. Ignored if an account ID is specified",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "min_players",
            "in": "query",
            "description": "Minimum number of human players that must be in a match for it to be returned",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "description": "An account ID to get matches from. This will fail if the user has their match history hidden",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "league_id",
            "in": "query",
            "description": "The league ID to return games from",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_at_match_id",
            "in": "query",
            "description": "The minimum match ID to start from",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "matches_requested",
            "in": "query",
            "description": "The number of requested matches to return (maximum 100)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IDOTA2Match_570/GetMatchHistoryBySequenceNum/v1": {
      "get": {
        "summary": "GetMatchHistoryBySequenceNum operation of IDOTA2Match_570",
        "description": "Performs the GetMatchHistoryBySequenceNum operation",
        "operationId": "IDOTA2Match_570_GetMatchHistoryBySequenceNum",
        "parameters": [
          {
            "name": "start_at_match_seq_num",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "matches_requested",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IDOTA2Match_570/GetTeamInfoByTeamID/v1": {
      "get": {
        "summary": "GetTeamInfoByTeamID operation of IDOTA2Match_570",
        "description": "Performs the GetTeamInfoByTeamID operation",
        "operationId": "IDOTA2Match_570_GetTeamInfoByTeamID",
        "parameters": [
          {
            "name": "start_at_team_id",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "teams_requested",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IDOTA2Match_570/GetTopLiveEventGame/v1": {
      "get": {
        "summary": "GetTopLiveEventGame operation of IDOTA2Match_570",
        "description": "Performs the GetTopLiveEventGame operation",
        "operationId": "IDOTA2Match_570_GetTopLiveEventGame",
        "parameters": [
          {
            "name": "partner",
            "in": "query",
            "description": "Which partner's games to use.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IDOTA2Match_570/GetTopLiveGame/v1": {
      "get": {
        "summary": "GetTopLiveGame operation of IDOTA2Match_570",
        "description": "Performs the GetTopLiveGame operation",
        "operationId": "IDOTA2Match_570_GetTopLiveGame",
        "parameters": [
          {
            "name": "partner",
            "in": "query",
            "description": "Which partner's games to use.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IDOTA2Match_570/GetTopWeekendTourneyGames/v1": {
      "get": {
        "summary": "GetTopWeekendTourneyGames operation of IDOTA2Match_570",
        "description": "Performs the GetTopWeekendTourneyGames operation",
        "operationId": "IDOTA2Match_570_GetTopWeekendTourneyGames",
        "parameters": [
          {
            "name": "partner",
            "in": "query",
            "description": "Which partner's games to use.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "home_division",
            "in": "query",
            "description": "Prefer matches from this division.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IDOTA2Match_570/GetTournamentPlayerStats/v2": {
      "get": {
        "summary": "GetTournamentPlayerStats operation of IDOTA2Match_570",
        "description": "Performs the GetTournamentPlayerStats operation",
        "operationId": "IDOTA2Match_570_GetTournamentPlayerStats",
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "league_id",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hero_id",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "time_frame",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "match_id",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "phase_id",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IDOTA2StreamSystem_570/GetBroadcasterInfo/v1": {
      "get": {
        "summary": "GetBroadcasterInfo operation of IDOTA2StreamSystem_570",
        "description": "Performs the GetBroadcasterInfo operation",
        "operationId": "IDOTA2StreamSystem_570_GetBroadcasterInfo",
        "parameters": [
          {
            "name": "broadcaster_steam_id",
            "in": "query",
            "description": "64-bit Steam ID of the broadcaster",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "league_id",
            "in": "query",
            "description": "LeagueID to use if we aren't in a lobby",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IDOTA2Ticket_570/GetSteamIDForBadgeID/v1": {
      "get": {
        "summary": "GetSteamIDForBadgeID operation of IDOTA2Ticket_570",
        "description": "Performs the GetSteamIDForBadgeID operation",
        "operationId": "IDOTA2Ticket_570_GetSteamIDForBadgeID",
        "parameters": [
          {
            "name": "BadgeID",
            "in": "query",
            "description": "The badge ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IDOTA2Ticket_570/SetSteamAccountPurchased/v1": {
      "post": {
        "summary": "SetSteamAccountPurchased operation of IDOTA2Ticket_570",
        "description": "Performs the SetSteamAccountPurchased operation",
        "operationId": "IDOTA2Ticket_570_SetSteamAccountPurchased",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "The 64-bit Steam ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "BadgeType",
            "in": "query",
            "description": "Badge Type",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IDOTA2Ticket_570/SteamAccountValidForBadgeType/v1": {
      "get": {
        "summary": "SteamAccountValidForBadgeType operation of IDOTA2Ticket_570",
        "description": "Performs the SteamAccountValidForBadgeType operation",
        "operationId": "IDOTA2Ticket_570_SteamAccountValidForBadgeType",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "The 64-bit Steam ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ValidBadgeType1",
            "in": "query",
            "description": "Valid Badge Type 1",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ValidBadgeType2",
            "in": "query",
            "description": "Valid Badge Type 2",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ValidBadgeType3",
            "in": "query",
            "description": "Valid Badge Type 3",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ValidBadgeType4",
            "in": "query",
            "description": "Valid Badge Type 4",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconDOTA2_570/GetEventStatsForAccount/v1": {
      "get": {
        "summary": "GetEventStatsForAccount operation of IEconDOTA2_570",
        "description": "Performs the GetEventStatsForAccount operation",
        "operationId": "IEconDOTA2_570_GetEventStatsForAccount",
        "parameters": [
          {
            "name": "eventid",
            "in": "query",
            "description": "The Event ID of the event you're looking for.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "accountid",
            "in": "query",
            "description": "The account ID to look up.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "The language to provide hero names in.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconDOTA2_570/GetHeroes/v1": {
      "get": {
        "summary": "GetHeroes operation of IEconDOTA2_570",
        "description": "Performs the GetHeroes operation",
        "operationId": "IEconDOTA2_570_GetHeroes",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "The language to provide hero names in.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemizedonly",
            "in": "query",
            "description": "Return a list of itemized heroes only.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconDOTA2_570/GetItemCreators/v1": {
      "get": {
        "summary": "GetItemCreators operation of IEconDOTA2_570",
        "description": "Performs the GetItemCreators operation",
        "operationId": "IEconDOTA2_570_GetItemCreators",
        "parameters": [
          {
            "name": "itemdef",
            "in": "query",
            "description": "The item definition to get creator information for.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconDOTA2_570/GetItemWorkshopPublishedFileIDs/v1": {
      "get": {
        "summary": "GetItemWorkshopPublishedFileIDs operation of IEconDOTA2_570",
        "description": "Performs the GetItemWorkshopPublishedFileIDs operation",
        "operationId": "IEconDOTA2_570_GetItemWorkshopPublishedFileIDs",
        "parameters": [
          {
            "name": "itemdef",
            "in": "query",
            "description": "The item definition to get published file ids for.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconDOTA2_570/GetRarities/v1": {
      "get": {
        "summary": "GetRarities operation of IEconDOTA2_570",
        "description": "Performs the GetRarities operation",
        "operationId": "IEconDOTA2_570_GetRarities",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "The language to provide rarity names in.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconDOTA2_570/GetTournamentPrizePool/v1": {
      "get": {
        "summary": "GetTournamentPrizePool operation of IEconDOTA2_570",
        "description": "Performs the GetTournamentPrizePool operation",
        "operationId": "IEconDOTA2_570_GetTournamentPrizePool",
        "parameters": [
          {
            "name": "leagueid",
            "in": "query",
            "description": "The ID of the league to get the prize pool of",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconItems_440/GetPlayerItems/v1": {
      "get": {
        "summary": "GetPlayerItems operation of IEconItems_440",
        "description": "Performs the GetPlayerItems operation",
        "operationId": "IEconItems_440_GetPlayerItems",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "The Steam ID to fetch items for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconItems_440/GetSchema/v1": {
      "get": {
        "summary": "GetSchema operation of IEconItems_440",
        "description": "Performs the GetSchema operation",
        "operationId": "IEconItems_440_GetSchema",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "The language to return the names in. Defaults to returning string keys.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconItems_440/GetSchemaItems/v1": {
      "get": {
        "summary": "GetSchemaItems operation of IEconItems_440",
        "description": "Performs the GetSchemaItems operation",
        "operationId": "IEconItems_440_GetSchemaItems",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "The language to return the names in. Defaults to returning string keys.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The first item id to return. Defaults to 0. Response will indicate next value to query if applicable.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconItems_440/GetSchemaOverview/v1": {
      "get": {
        "summary": "GetSchemaOverview operation of IEconItems_440",
        "description": "Performs the GetSchemaOverview operation",
        "operationId": "IEconItems_440_GetSchemaOverview",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "The language to return the names in. Defaults to returning string keys.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconItems_440/GetSchemaURL/v1": {
      "get": {
        "summary": "GetSchemaURL operation of IEconItems_440",
        "description": "Performs the GetSchemaURL operation",
        "operationId": "IEconItems_440_GetSchemaURL",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconItems_440/GetStoreMetaData/v1": {
      "get": {
        "summary": "GetStoreMetaData operation of IEconItems_440",
        "description": "Performs the GetStoreMetaData operation",
        "operationId": "IEconItems_440_GetStoreMetaData",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "The language to results in.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconItems_440/GetStoreStatus/v1": {
      "get": {
        "summary": "GetStoreStatus operation of IEconItems_440",
        "description": "Performs the GetStoreStatus operation",
        "operationId": "IEconItems_440_GetStoreStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconItems_570/GetPlayerItems/v1": {
      "get": {
        "summary": "GetPlayerItems operation of IEconItems_570",
        "description": "Performs the GetPlayerItems operation",
        "operationId": "IEconItems_570_GetPlayerItems",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "The Steam ID to fetch items for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconItems_570/GetStoreMetaData/v1": {
      "get": {
        "summary": "GetStoreMetaData operation of IEconItems_570",
        "description": "Performs the GetStoreMetaData operation",
        "operationId": "IEconItems_570_GetStoreMetaData",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "The language to results in.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconItems_620/GetPlayerItems/v1": {
      "get": {
        "summary": "GetPlayerItems operation of IEconItems_620",
        "description": "Performs the GetPlayerItems operation",
        "operationId": "IEconItems_620_GetPlayerItems",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "The Steam ID to fetch items for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconItems_620/GetSchema/v1": {
      "get": {
        "summary": "GetSchema operation of IEconItems_620",
        "description": "Performs the GetSchema operation",
        "operationId": "IEconItems_620_GetSchema",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "The language to return the names in. Defaults to returning string keys.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconItems_730/GetPlayerItems/v1": {
      "get": {
        "summary": "GetPlayerItems operation of IEconItems_730",
        "description": "Performs the GetPlayerItems operation",
        "operationId": "IEconItems_730_GetPlayerItems",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "The Steam ID to fetch items for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconItems_730/GetSchema/v2": {
      "get": {
        "summary": "GetSchema operation of IEconItems_730",
        "description": "Performs the GetSchema operation",
        "operationId": "IEconItems_730_GetSchema",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "The language to return the names in. Defaults to returning string keys.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconItems_730/GetSchemaURL/v2": {
      "get": {
        "summary": "GetSchemaURL operation of IEconItems_730",
        "description": "Performs the GetSchemaURL operation",
        "operationId": "IEconItems_730_GetSchemaURL",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconItems_730/GetStoreMetaData/v1": {
      "get": {
        "summary": "GetStoreMetaData operation of IEconItems_730",
        "description": "Performs the GetStoreMetaData operation",
        "operationId": "IEconItems_730_GetStoreMetaData",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "The language to results in.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconItems_583950/GetEquippedPlayerItems/v1": {
      "get": {
        "summary": "GetEquippedPlayerItems operation of IEconItems_583950",
        "description": "Performs the GetEquippedPlayerItems operation",
        "operationId": "IEconItems_583950_GetEquippedPlayerItems",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "The Steam ID to fetch items for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "class_id",
            "in": "query",
            "description": "Return items equipped for this class id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconItems_1046930/GetPlayerItems/v1": {
      "get": {
        "summary": "GetPlayerItems operation of IEconItems_1046930",
        "description": "Performs the GetPlayerItems operation",
        "operationId": "IEconItems_1046930_GetPlayerItems",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "The Steam ID to fetch items for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconItems_1269260/GetEquippedPlayerItems/v1": {
      "get": {
        "summary": "GetEquippedPlayerItems operation of IEconItems_1269260",
        "description": "Performs the GetEquippedPlayerItems operation",
        "operationId": "IEconItems_1269260_GetEquippedPlayerItems",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "The Steam ID to fetch items for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "class_id",
            "in": "query",
            "description": "Return items equipped for this class id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconService/GetTradeHistory/v1": {
      "get": {
        "summary": "Gets a history of trades",
        "description": "Performs the GetTradeHistory operation",
        "operationId": "IEconService_GetTradeHistory",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_trades",
            "in": "query",
            "description": "The number of trades to return information for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "start_after_time",
            "in": "query",
            "description": "The time of the last trade shown on the previous page of results, or the time of the first trade if navigating back",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "start_after_tradeid",
            "in": "query",
            "description": "The tradeid shown on the previous page of results, or the ID of the first trade if navigating back",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "navigating_back",
            "in": "query",
            "description": "The user wants the previous page of results, so return the previous max_trades trades before the start time and ID",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "get_descriptions",
            "in": "query",
            "description": "If set, the item display data for the items included in the returned trades will also be returned",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "The language to use when loading item display data",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_failed",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_total",
            "in": "query",
            "description": "If set, the total number of trades the account has participated in will be included in the response",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconService/GetTradeHoldDurations/v1": {
      "get": {
        "summary": "Returns the estimated hold duration and end date that a trade with a user would have",
        "description": "Performs the GetTradeHoldDurations operation",
        "operationId": "IEconService_GetTradeHoldDurations",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid_target",
            "in": "query",
            "description": "User you are trading with",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "trade_offer_access_token",
            "in": "query",
            "description": "A special token that allows for trade offers from non-friends.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconService/GetTradeOffer/v1": {
      "get": {
        "summary": "Gets a specific trade offer",
        "description": "Performs the GetTradeOffer operation",
        "operationId": "IEconService_GetTradeOffer",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tradeofferid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "get_descriptions",
            "in": "query",
            "description": "If set, the item display data for the items included in the returned trade offers will also be returned. If one or more descriptions can't be retrieved, then your request will fail.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconService/GetTradeOffers/v1": {
      "get": {
        "summary": "Get a list of sent or received trade offers",
        "description": "Performs the GetTradeOffers operation",
        "operationId": "IEconService_GetTradeOffers",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "get_sent_offers",
            "in": "query",
            "description": "Request the list of sent offers.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "get_received_offers",
            "in": "query",
            "description": "Request the list of received offers.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "get_descriptions",
            "in": "query",
            "description": "If set, the item display data for the items included in the returned trade offers will also be returned. If one or more descriptions can't be retrieved, then your request will fail.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "The language to use when loading item display data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active_only",
            "in": "query",
            "description": "Indicates we should only return offers which are still active, or offers that have changed in state since the time_historical_cutoff",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "historical_only",
            "in": "query",
            "description": "Indicates we should only return offers which are not active.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "time_historical_cutoff",
            "in": "query",
            "description": "When active_only is set, offers updated since this time will also be returned. When historical_only is set, only offers updated since this time are included.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor aka start index",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconService/GetTradeOffersSummary/v1": {
      "get": {
        "summary": "Get counts of pending and new trade offers",
        "description": "Performs the GetTradeOffersSummary operation",
        "operationId": "IEconService_GetTradeOffersSummary",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "time_last_visit",
            "in": "query",
            "description": "The time the user last visited.  If not passed, will use the time the user last visited the trade offer page.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IEconService/GetTradeStatus/v1": {
      "get": {
        "summary": "Gets status for a specific trade",
        "description": "Performs the GetTradeStatus operation",
        "operationId": "IEconService_GetTradeStatus",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tradeid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "get_descriptions",
            "in": "query",
            "description": "If set, the item display data for the items included in the returned trades will also be returned",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "The language to use when loading item display data",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGCVersion_440/GetClientVersion/v1": {
      "get": {
        "summary": "GetClientVersion operation of IGCVersion_440",
        "description": "Performs the GetClientVersion operation",
        "operationId": "IGCVersion_440_GetClientVersion",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGCVersion_440/GetServerVersion/v1": {
      "get": {
        "summary": "GetServerVersion operation of IGCVersion_440",
        "description": "Performs the GetServerVersion operation",
        "operationId": "IGCVersion_440_GetServerVersion",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGCVersion_570/GetClientVersion/v1": {
      "get": {
        "summary": "GetClientVersion operation of IGCVersion_570",
        "description": "Performs the GetClientVersion operation",
        "operationId": "IGCVersion_570_GetClientVersion",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGCVersion_570/GetServerVersion/v1": {
      "get": {
        "summary": "GetServerVersion operation of IGCVersion_570",
        "description": "Performs the GetServerVersion operation",
        "operationId": "IGCVersion_570_GetServerVersion",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGCVersion_730/GetServerVersion/v1": {
      "get": {
        "summary": "GetServerVersion operation of IGCVersion_730",
        "description": "Performs the GetServerVersion operation",
        "operationId": "IGCVersion_730_GetServerVersion",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGCVersion_583950/GetClientVersion/v1": {
      "get": {
        "summary": "GetClientVersion operation of IGCVersion_583950",
        "description": "Performs the GetClientVersion operation",
        "operationId": "IGCVersion_583950_GetClientVersion",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGCVersion_583950/GetServerVersion/v1": {
      "get": {
        "summary": "GetServerVersion operation of IGCVersion_583950",
        "description": "Performs the GetServerVersion operation",
        "operationId": "IGCVersion_583950_GetServerVersion",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGCVersion_1046930/GetClientVersion/v1": {
      "get": {
        "summary": "GetClientVersion operation of IGCVersion_1046930",
        "description": "Performs the GetClientVersion operation",
        "operationId": "IGCVersion_1046930_GetClientVersion",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGCVersion_1046930/GetServerVersion/v1": {
      "get": {
        "summary": "GetServerVersion operation of IGCVersion_1046930",
        "description": "Performs the GetServerVersion operation",
        "operationId": "IGCVersion_1046930_GetServerVersion",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGCVersion_1269260/GetClientVersion/v1": {
      "get": {
        "summary": "GetClientVersion operation of IGCVersion_1269260",
        "description": "Performs the GetClientVersion operation",
        "operationId": "IGCVersion_1269260_GetClientVersion",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGCVersion_1269260/GetServerVersion/v1": {
      "get": {
        "summary": "GetServerVersion operation of IGCVersion_1269260",
        "description": "Performs the GetServerVersion operation",
        "operationId": "IGCVersion_1269260_GetServerVersion",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGCVersion_1422450/GetClientVersion/v1": {
      "get": {
        "summary": "GetClientVersion operation of IGCVersion_1422450",
        "description": "Performs the GetClientVersion operation",
        "operationId": "IGCVersion_1422450_GetClientVersion",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGCVersion_1422450/GetServerVersion/v1": {
      "get": {
        "summary": "GetServerVersion operation of IGCVersion_1422450",
        "description": "Performs the GetServerVersion operation",
        "operationId": "IGCVersion_1422450_GetServerVersion",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameNotificationsService/UserCreateSession/v1": {
      "post": {
        "summary": "Creates an async game session",
        "description": "Performs the UserCreateSession operation",
        "operationId": "IGameNotificationsService_UserCreateSession",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "The appid to create the session for.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Game-specified context value the game can used to associate the session with some object on their backend.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title of the session to be displayed within each user's list of sessions.",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "users",
            "in": "query",
            "description": "The initial state of all users in the session.",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameNotificationsService/UserDeleteSession/v1": {
      "post": {
        "summary": "Deletes an async game session",
        "description": "Performs the UserDeleteSession operation",
        "operationId": "IGameNotificationsService_UserDeleteSession",
        "parameters": [
          {
            "name": "sessionid",
            "in": "query",
            "description": "The sessionid to delete.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The appid of the session to delete.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "steamid to make the request on behalf of -- if specified, the user must be in the session.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameNotificationsService/UserUpdateSession/v1": {
      "post": {
        "summary": "Updates an async game session",
        "description": "Performs the UserUpdateSession operation",
        "operationId": "IGameNotificationsService_UserUpdateSession",
        "parameters": [
          {
            "name": "sessionid",
            "in": "query",
            "description": "The sessionid to update.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The appid of the session to update.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The new title of the session.  If not specified, the title will not be changed.",
            "required": false,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "users",
            "in": "query",
            "description": "A list of users whose state will be updated to reflect the given state. If the users are not already in the session, they will be added to it.",
            "required": false,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "steamid to make the request on behalf of -- if specified, the user must be in the session and all users being added to the session must be friends with the user.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameServersService/CreateAccount/v1": {
      "post": {
        "summary": "Creates a persistent game server account",
        "description": "Performs the CreateAccount operation",
        "operationId": "IGameServersService_CreateAccount",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "The app to use the account for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "memo",
            "in": "query",
            "description": "The memo to set on the new account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameServersService/DeleteAccount/v1": {
      "post": {
        "summary": "Deletes a persistent game server account",
        "description": "Performs the DeleteAccount operation",
        "operationId": "IGameServersService_DeleteAccount",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The SteamID of the game server account to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameServersService/GetAccountList/v1": {
      "get": {
        "summary": "Gets a list of game server accounts with their logon tokens",
        "description": "Performs the GetAccountList operation",
        "operationId": "IGameServersService_GetAccountList",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameServersService/GetAccountPublicInfo/v1": {
      "get": {
        "summary": "Gets public information about a given game server account",
        "description": "Performs the GetAccountPublicInfo operation",
        "operationId": "IGameServersService_GetAccountPublicInfo",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The SteamID of the game server to get info on",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameServersService/GetServerIPsBySteamID/v1": {
      "get": {
        "summary": "Gets a list of server IP addresses given a list of SteamIDs",
        "description": "Performs the GetServerIPsBySteamID operation",
        "operationId": "IGameServersService_GetServerIPsBySteamID",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "server_steamids",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameServersService/GetServerSteamIDsByIP/v1": {
      "get": {
        "summary": "Gets a list of server SteamIDs given a list of IPs",
        "description": "Performs the GetServerSteamIDsByIP operation",
        "operationId": "IGameServersService_GetServerSteamIDsByIP",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "server_ips",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameServersService/QueryByFakeIP/v1": {
      "get": {
        "summary": "Perform a query on a specific server by FakeIP",
        "description": "Performs the QueryByFakeIP operation",
        "operationId": "IGameServersService_QueryByFakeIP",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fake_ip",
            "in": "query",
            "description": "FakeIP of server to query.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fake_port",
            "in": "query",
            "description": "Fake port of server to query.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "app_id",
            "in": "query",
            "description": "AppID to use.  Each AppID has its own FakeIP address.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "query_type",
            "in": "query",
            "description": "What type of query?",
            "required": true,
            "schema": {
              "type": "{enum}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameServersService/QueryLoginToken/v1": {
      "get": {
        "summary": "Queries the status of the specified token, which must be owned by you",
        "description": "Performs the QueryLoginToken operation",
        "operationId": "IGameServersService_QueryLoginToken",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "login_token",
            "in": "query",
            "description": "Login token to query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameServersService/ResetLoginToken/v1": {
      "post": {
        "summary": "Generates a new login token for the specified game server",
        "description": "Performs the ResetLoginToken operation",
        "operationId": "IGameServersService_ResetLoginToken",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The SteamID of the game server to reset the login token of",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IGameServersService/SetMemo/v1": {
      "post": {
        "summary": "This method changes the memo associated with the game server account. Memos do not affect the account in any way. The memo shows up in the GetAccountList response and serves only as a reminder of what the account is used for.",
        "description": "Performs the SetMemo operation",
        "operationId": "IGameServersService_SetMemo",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The SteamID of the game server to set the memo on",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "memo",
            "in": "query",
            "description": "The memo to set on the new account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IHelpRequestLogsService/GetApplicationLogDemand/v1": {
      "post": {
        "summary": "Returns whether the server would like the user to upload logs",
        "description": "Performs the GetApplicationLogDemand operation",
        "operationId": "IHelpRequestLogsService_GetApplicationLogDemand",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IHelpRequestLogsService/UploadUserApplicationLog/v1": {
      "post": {
        "summary": "User uploading application logs",
        "description": "Performs the UploadUserApplicationLog operation",
        "operationId": "IHelpRequestLogsService_UploadUserApplicationLog",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "log_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version_string",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "log_contents",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IInventoryService/CombineItemStacks/v1": {
      "post": {
        "summary": "Combine two stacks of items",
        "description": "Performs the CombineItemStacks operation",
        "operationId": "IInventoryService_CombineItemStacks",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fromitemid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "destitemid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IInventoryService/GetPriceSheet/v1": {
      "get": {
        "summary": "Get the Inventory Service price sheet",
        "description": "Performs the GetPriceSheet operation",
        "operationId": "IInventoryService_GetPriceSheet",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ecurrency",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "currency_code",
            "in": "query",
            "description": "Standard short code of the requested currency (preferred)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IInventoryService/SplitItemStack/v1": {
      "post": {
        "summary": "Split an item stack into two stacks",
        "description": "Performs the SplitItemStack operation",
        "operationId": "IInventoryService_SplitItemStack",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPlayerService/GetBadges/v1": {
      "get": {
        "summary": "Gets badges that are owned by a specific user",
        "description": "Performs the GetBadges operation",
        "operationId": "IPlayerService_GetBadges",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The player we're asking about",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPlayerService/GetCommunityBadgeProgress/v1": {
      "get": {
        "summary": "Gets all the quests needed to get the specified badge, and which are completed",
        "description": "Performs the GetCommunityBadgeProgress operation",
        "operationId": "IPlayerService_GetCommunityBadgeProgress",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The player we're asking about",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "badgeid",
            "in": "query",
            "description": "The badge we're asking about",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPlayerService/GetOwnedGames/v1": {
      "get": {
        "summary": "Return a list of games owned by the player",
        "description": "Performs the GetOwnedGames operation",
        "operationId": "IPlayerService_GetOwnedGames",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The player we're asking about",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_appinfo",
            "in": "query",
            "description": "true if we want additional details (name, icon) about each game",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_played_free_games",
            "in": "query",
            "description": "Free games are excluded by default.  If this is set, free games the user has played will be returned.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "appids_filter",
            "in": "query",
            "description": "if set, restricts result set to the passed in apps",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_free_sub",
            "in": "query",
            "description": "Some games are in the free sub, which are excluded by default.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip_unvetted_apps",
            "in": "query",
            "description": "if set, skip unvetted store apps",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "Will return appinfo in this language",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_extended_appinfo",
            "in": "query",
            "description": "true if we want even more details (capsule, sortas, and capabilities) about each game.  include_appinfo must also be true.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPlayerService/GetRecentlyPlayedGames/v1": {
      "get": {
        "summary": "Gets information about a player's recently played games",
        "description": "Performs the GetRecentlyPlayedGames operation",
        "operationId": "IPlayerService_GetRecentlyPlayedGames",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The player we're asking about",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The number of games to return (0/unset: all)",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPlayerService/GetSteamLevel/v1": {
      "get": {
        "summary": "Returns the Steam Level of a user",
        "description": "Performs the GetSteamLevel operation",
        "operationId": "IPlayerService_GetSteamLevel",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The player we're asking about",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPlayerService/IsPlayingSharedGame/v1": {
      "get": {
        "summary": "Obsolete, partners should use ISteamUser.CheckAppOwnership",
        "description": "Performs the IsPlayingSharedGame operation",
        "operationId": "IPlayerService_IsPlayingSharedGame",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "The player we're asking about",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid_playing",
            "in": "query",
            "description": "The game player is currently playing",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPlayerService/RecordOfflinePlaytime/v1": {
      "post": {
        "summary": "Tracks playtime for a user when they are offline",
        "description": "Performs the RecordOfflinePlaytime operation",
        "operationId": "IPlayerService_RecordOfflinePlaytime",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ticket",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "play_sessions",
            "in": "query",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPortal2Leaderboards_620/GetBucketizedData/v1": {
      "get": {
        "summary": "GetBucketizedData operation of IPortal2Leaderboards_620",
        "description": "Performs the GetBucketizedData operation",
        "operationId": "IPortal2Leaderboards_620_GetBucketizedData",
        "parameters": [
          {
            "name": "leaderboardName",
            "in": "query",
            "description": "The leaderboard name to fetch data for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPublishedFileService/GetDetails/v1": {
      "get": {
        "summary": "Retrieves information about a set of published files.",
        "description": "Performs the GetDetails operation",
        "operationId": "IPublishedFileService_GetDetails",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "publishedfileids",
            "in": "query",
            "description": "Set of published file Ids to retrieve details for.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "includetags",
            "in": "query",
            "description": "If true, return tag information in the returned details.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeadditionalpreviews",
            "in": "query",
            "description": "If true, return preview information in the returned details.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includechildren",
            "in": "query",
            "description": "If true, return children in the returned details.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includekvtags",
            "in": "query",
            "description": "If true, return key value tags in the returned details.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includevotes",
            "in": "query",
            "description": "If true, return vote data in the returned details.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "short_description",
            "in": "query",
            "description": "If true, return a short description instead of the full description.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeforsaledata",
            "in": "query",
            "description": "If true, return pricing data, if applicable.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includemetadata",
            "in": "query",
            "description": "If true, populate the metadata field.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "Specifies the localized text to return. Defaults to English.",
            "required": false,
            "schema": {
              "type": "elanguage"
            }
          },
          {
            "name": "return_playtime_stats",
            "in": "query",
            "description": "Return playtime stats for the specified number of days before today.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "strip_description_bbcode",
            "in": "query",
            "description": "Strips BBCode from descriptions.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "desired_revision",
            "in": "query",
            "description": "Return the data for the specified revision.",
            "required": false,
            "schema": {
              "type": "epublishedfilerevision"
            }
          },
          {
            "name": "includereactions",
            "in": "query",
            "description": "If true, then reactions to items will be returned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "admin_query",
            "in": "query",
            "description": "Admin tool is doing a query, return hidden items",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPublishedFileService/GetSubSectionData/v1": {
      "get": {
        "summary": "Get sub section data (for table of contents, a specific section, or all)",
        "description": "Performs the GetSubSectionData operation",
        "operationId": "IPublishedFileService_GetSubSectionData",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "publishedfileid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "for_table_of_contents",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "specific_sectionid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "desired_revision",
            "in": "query",
            "description": "Return the data for the specified revision.",
            "required": false,
            "schema": {
              "type": "{enum}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPublishedFileService/GetUserFileCount/v1": {
      "get": {
        "summary": "Retrieves a count of files published by a user. Uses the same messages as GetUserFiles but totalonly must be true.",
        "description": "Performs the GetUserFileCount operation",
        "operationId": "IPublishedFileService_GetUserFileCount",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "Steam ID of the user whose files are being requested.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "App Id of the app that the files were published to.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "shortcutid",
            "in": "query",
            "description": "Shortcut Id to retrieve published files from.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Starting page for results.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "numperpage",
            "in": "query",
            "description": "The number of results, per page to return.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of files to be returned.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortmethod",
            "in": "query",
            "description": "Sorting method to use on returned values.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "privacy",
            "in": "query",
            "description": "Filter by privacy settings.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "requiredtags",
            "in": "query",
            "description": "Tags that must be present on a published file to satisfy the query.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludedtags",
            "in": "query",
            "description": "Tags that must NOT be present on a published file to satisfy the query.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "required_kv_tags",
            "in": "query",
            "description": "Required key-value tags to match on.",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "filetype",
            "in": "query",
            "description": "File type to match files to.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "creator_appid",
            "in": "query",
            "description": "App Id of the app that published the files, only matched if specified.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "match_cloud_filename",
            "in": "query",
            "description": "Match this cloud filename if specified.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cache_max_age_seconds",
            "in": "query",
            "description": "Allow stale data to be returned for the specified number of seconds.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "Specifies the localized text to return. Defaults to English.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "taggroups",
            "in": "query",
            "description": "At least one of the tags must be present on a published file to satisfy the query.",
            "required": false,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "excluded_content_descriptors",
            "in": "query",
            "description": "Filter out items that have these content descriptors.",
            "required": false,
            "schema": {
              "type": "{enum}"
            }
          },
          {
            "name": "admin_query",
            "in": "query",
            "description": "Admin tool is doing a query, return hidden items",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "totalonly",
            "in": "query",
            "description": "If true, only return the total number of files that satisfy this query.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ids_only",
            "in": "query",
            "description": "If true, only return the published file ids of files that satisfy this query.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_vote_data",
            "in": "query",
            "description": "Return vote data",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_tags",
            "in": "query",
            "description": "Return tags in the file details",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_kv_tags",
            "in": "query",
            "description": "Return key-value tags in the file details",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_previews",
            "in": "query",
            "description": "Return preview image and video details in the file details",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_children",
            "in": "query",
            "description": "Return child item ids in the file details",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_short_description",
            "in": "query",
            "description": "Populate the short_description field instead of file_description",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_for_sale_data",
            "in": "query",
            "description": "Return pricing information, if applicable",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_metadata",
            "in": "query",
            "description": "Populate the metadata field",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_playtime_stats",
            "in": "query",
            "description": "Return playtime stats for the specified number of days before today.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "strip_description_bbcode",
            "in": "query",
            "description": "Strips BBCode from descriptions.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_reactions",
            "in": "query",
            "description": "If true, then reactions to items will be returned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "startindex_override",
            "in": "query",
            "description": "Backwards compatible for the client.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "desired_revision",
            "in": "query",
            "description": "Return the data for the specified revision.",
            "required": false,
            "schema": {
              "type": "{enum}"
            }
          },
          {
            "name": "return_apps",
            "in": "query",
            "description": "Return list of apps the items belong to",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPublishedFileService/GetUserFiles/v1": {
      "get": {
        "summary": "Retrieves files published by a user.",
        "description": "Performs the GetUserFiles operation",
        "operationId": "IPublishedFileService_GetUserFiles",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "Steam ID of the user whose files are being requested.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "App Id of the app that the files were published to.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "shortcutid",
            "in": "query",
            "description": "Shortcut Id to retrieve published files from.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Starting page for results.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "numperpage",
            "in": "query",
            "description": "The number of results, per page to return.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of files to be returned.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortmethod",
            "in": "query",
            "description": "Sorting method to use on returned values.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "privacy",
            "in": "query",
            "description": "Filter by privacy settings.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "requiredtags",
            "in": "query",
            "description": "Tags that must be present on a published file to satisfy the query.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludedtags",
            "in": "query",
            "description": "Tags that must NOT be present on a published file to satisfy the query.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "required_kv_tags",
            "in": "query",
            "description": "Required key-value tags to match on.",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "filetype",
            "in": "query",
            "description": "File type to match files to.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "creator_appid",
            "in": "query",
            "description": "App Id of the app that published the files, only matched if specified.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "match_cloud_filename",
            "in": "query",
            "description": "Match this cloud filename if specified.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cache_max_age_seconds",
            "in": "query",
            "description": "Allow stale data to be returned for the specified number of seconds.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "Specifies the localized text to return. Defaults to English.",
            "required": false,
            "schema": {
              "type": "elanguage"
            }
          },
          {
            "name": "taggroups",
            "in": "query",
            "description": "At least one of the tags must be present on a published file to satisfy the query.",
            "required": false,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "excluded_content_descriptors",
            "in": "query",
            "description": "Filter out items that have these content descriptors.",
            "required": false,
            "schema": {
              "type": "{enum}"
            }
          },
          {
            "name": "admin_query",
            "in": "query",
            "description": "Admin tool is doing a query, return hidden items",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "totalonly",
            "in": "query",
            "description": "If true, only return the total number of files that satisfy this query.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ids_only",
            "in": "query",
            "description": "If true, only return the published file ids of files that satisfy this query.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_vote_data",
            "in": "query",
            "description": "Return vote data",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_tags",
            "in": "query",
            "description": "Return tags in the file details",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_kv_tags",
            "in": "query",
            "description": "Return key-value tags in the file details",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_previews",
            "in": "query",
            "description": "Return preview image and video details in the file details",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_children",
            "in": "query",
            "description": "Return child item ids in the file details",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_short_description",
            "in": "query",
            "description": "Populate the short_description field instead of file_description",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_for_sale_data",
            "in": "query",
            "description": "Return pricing information, if applicable",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_metadata",
            "in": "query",
            "description": "Populate the metadata field",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_playtime_stats",
            "in": "query",
            "description": "Return playtime stats for the specified number of days before today.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "strip_description_bbcode",
            "in": "query",
            "description": "Strips BBCode from descriptions.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_reactions",
            "in": "query",
            "description": "If true, then reactions to items will be returned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "startindex_override",
            "in": "query",
            "description": "Backwards compatible for the client.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "desired_revision",
            "in": "query",
            "description": "Return the data for the specified revision.",
            "required": false,
            "schema": {
              "type": "epublishedfilerevision"
            }
          },
          {
            "name": "return_apps",
            "in": "query",
            "description": "Return list of apps the items belong to",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPublishedFileService/GetUserVoteSummary/v1": {
      "get": {
        "summary": "Get user vote summary",
        "description": "Performs the GetUserVoteSummary operation",
        "operationId": "IPublishedFileService_GetUserVoteSummary",
        "parameters": [
          {
            "name": "publishedfileids",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IPublishedFileService/QueryFiles/v1": {
      "get": {
        "summary": "Performs a search query for published files",
        "description": "Performs the QueryFiles operation",
        "operationId": "IPublishedFileService_QueryFiles",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query_type",
            "in": "query",
            "description": "enumeration EPublishedFileQueryType in clientenums.h",
            "required": true,
            "schema": {
              "type": "epublishedfilequerytype"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor to paginate through the results (set to '*' for the first request).  Prefer this over using the page parameter, as it will allow you to do deep pagination.  When used, the page parameter will be ignored.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "numperpage",
            "in": "query",
            "description": "The number of results, per page to return.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "creator_appid",
            "in": "query",
            "description": "App that created the files",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "App that consumes the files",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "requiredtags",
            "in": "query",
            "description": "Tags to match on. See match_all_tags parameter below",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludedtags",
            "in": "query",
            "description": "Tags that must NOT be present on a published file to satisfy the query.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "match_all_tags",
            "in": "query",
            "description": "If true, then items must have all the tags specified, otherwise they must have at least one of the tags.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "required_flags",
            "in": "query",
            "description": "Required flags that must be set on any returned items",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitted_flags",
            "in": "query",
            "description": "Flags that must not be set on any returned items",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search_text",
            "in": "query",
            "description": "Text to match in the item's title or description",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filetype",
            "in": "query",
            "description": "EPublishedFileInfoMatchingFileType",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "child_publishedfileid",
            "in": "query",
            "description": "Find all items that reference the given item.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "days",
            "in": "query",
            "description": "If query_type is k_PublishedFileQueryType_RankedByTrend, then this is the number of days to get votes for [1,7].",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include_recent_votes_only",
            "in": "query",
            "description": "If query_type is k_PublishedFileQueryType_RankedByTrend, then limit result set just to items that have votes within the day range given",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "cache_max_age_seconds",
            "in": "query",
            "description": "Allow stale data to be returned for the specified number of seconds.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "Language to search in and also what gets returned. Defaults to English.",
            "required": false,
            "schema": {
              "type": "elanguage"
            }
          },
          {
            "name": "required_kv_tags",
            "in": "query",
            "description": "Required key-value tags to match on.",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "taggroups",
            "in": "query",
            "description": "At least one of the tags must be present on a published file to satisfy the query.",
            "required": false,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "date_range_created",
            "in": "query",
            "description": "Filter to items created within this range.",
            "required": false,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "date_range_updated",
            "in": "query",
            "description": "Filter to items updated within this range.",
            "required": false,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "excluded_content_descriptors",
            "in": "query",
            "description": "Filter out items that have these content descriptors.",
            "required": false,
            "schema": {
              "type": "{enum}"
            }
          },
          {
            "name": "admin_query",
            "in": "query",
            "description": "Admin tool is doing a query, return hidden items",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "totalonly",
            "in": "query",
            "description": "If true, only return the total number of files that satisfy this query.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ids_only",
            "in": "query",
            "description": "If true, only return the published file ids of files that satisfy this query.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_vote_data",
            "in": "query",
            "description": "Return vote data",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_tags",
            "in": "query",
            "description": "Return tags in the file details",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_kv_tags",
            "in": "query",
            "description": "Return key-value tags in the file details",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_previews",
            "in": "query",
            "description": "Return preview image and video details in the file details",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_children",
            "in": "query",
            "description": "Return child item ids in the file details",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_short_description",
            "in": "query",
            "description": "Populate the short_description field instead of file_description",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_for_sale_data",
            "in": "query",
            "description": "Return pricing information, if applicable",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_metadata",
            "in": "query",
            "description": "Populate the metadata",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "return_playtime_stats",
            "in": "query",
            "description": "Return playtime stats for the specified number of days before today.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "return_details",
            "in": "query",
            "description": "By default, if none of the other 'return_*' fields are set, only some voting details are returned. Set this to true to return the default set of details.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "strip_description_bbcode",
            "in": "query",
            "description": "Strips BBCode from descriptions.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "desired_revision",
            "in": "query",
            "description": "Return the data for the specified revision.",
            "required": false,
            "schema": {
              "type": "epublishedfilerevision"
            }
          },
          {
            "name": "return_reactions",
            "in": "query",
            "description": "If true, then reactions to items will be returned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamApps/GetAppList/v2": {
      "get": {
        "summary": "GetAppList operation of ISteamApps",
        "description": "Performs the GetAppList operation",
        "operationId": "ISteamApps_GetAppList",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamApps/GetSDRConfig/v1": {
      "get": {
        "summary": "GetSDRConfig operation of ISteamApps",
        "description": "Performs the GetSDRConfig operation",
        "operationId": "ISteamApps_GetSDRConfig",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamApps/GetServersAtAddress/v1": {
      "get": {
        "summary": "GetServersAtAddress operation of ISteamApps",
        "description": "Performs the GetServersAtAddress operation",
        "operationId": "ISteamApps_GetServersAtAddress",
        "parameters": [
          {
            "name": "addr",
            "in": "query",
            "description": "IP or IP:queryport to list",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamApps/UpToDateCheck/v1": {
      "get": {
        "summary": "UpToDateCheck operation of ISteamApps",
        "description": "Performs the UpToDateCheck operation",
        "operationId": "ISteamApps_UpToDateCheck",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "AppID of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "The installed version of the game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamBroadcast/ViewerHeartbeat/v1": {
      "get": {
        "summary": "ViewerHeartbeat operation of ISteamBroadcast",
        "description": "Performs the ViewerHeartbeat operation",
        "operationId": "ISteamBroadcast_ViewerHeartbeat",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "Steam ID of the broadcaster",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sessionid",
            "in": "query",
            "description": "Broadcast Session ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "Viewer token",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "stream",
            "in": "query",
            "description": "video stream representation watching",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamCDN/SetClientFilters/v1": {
      "post": {
        "summary": "SetClientFilters operation of ISteamCDN",
        "description": "Performs the SetClientFilters operation",
        "operationId": "ISteamCDN_SetClientFilters",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdnname",
            "in": "query",
            "description": "Steam name of CDN property",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowedipblocks",
            "in": "query",
            "description": "comma-separated list of allowed IP address blocks in CIDR format - blank for not used",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowedasns",
            "in": "query",
            "description": "comma-separated list of allowed client network AS numbers - blank for not used",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowedipcountries",
            "in": "query",
            "description": "comma-separated list of allowed client IP country codes in ISO 3166-1 format - blank for not used",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamCDN/SetPerformanceStats/v1": {
      "post": {
        "summary": "SetPerformanceStats operation of ISteamCDN",
        "description": "Performs the SetPerformanceStats operation",
        "operationId": "ISteamCDN_SetPerformanceStats",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdnname",
            "in": "query",
            "description": "Steam name of CDN property",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mbps_sent",
            "in": "query",
            "description": "Outgoing network traffic in Mbps",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "mbps_recv",
            "in": "query",
            "description": "Incoming network traffic in Mbps",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cpu_percent",
            "in": "query",
            "description": "Percent CPU load",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cache_hit_percent",
            "in": "query",
            "description": "Percent cache hits",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamDirectory/GetCMList/v1": {
      "get": {
        "summary": "GetCMList operation of ISteamDirectory",
        "description": "Performs the GetCMList operation",
        "operationId": "ISteamDirectory_GetCMList",
        "parameters": [
          {
            "name": "cellid",
            "in": "query",
            "description": "Client's Steam cell ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "maxcount",
            "in": "query",
            "description": "Max number of servers to return",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamDirectory/GetCMListForConnect/v1": {
      "get": {
        "summary": "GetCMListForConnect operation of ISteamDirectory",
        "description": "Performs the GetCMListForConnect operation",
        "operationId": "ISteamDirectory_GetCMListForConnect",
        "parameters": [
          {
            "name": "cellid",
            "in": "query",
            "description": "Client's Steam cell ID, uses IP location if blank",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cmtype",
            "in": "query",
            "description": "Optional CM type filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "realm",
            "in": "query",
            "description": "Optional Steam Realm filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxcount",
            "in": "query",
            "description": "Max number of servers to return",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "qoslevel",
            "in": "query",
            "description": "Desired connection priority",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamDirectory/GetSteamPipeDomains/v1": {
      "get": {
        "summary": "GetSteamPipeDomains operation of ISteamDirectory",
        "description": "Performs the GetSteamPipeDomains operation",
        "operationId": "ISteamDirectory_GetSteamPipeDomains",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamEconomy/GetAssetClassInfo/v1": {
      "get": {
        "summary": "GetAssetClassInfo operation of ISteamEconomy",
        "description": "Performs the GetAssetClassInfo operation",
        "operationId": "ISteamEconomy_GetAssetClassInfo",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "Must be a steam economy app.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "The user's local language",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "class_count",
            "in": "query",
            "description": "Number of classes requested. Must be at least one.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "classid0",
            "in": "query",
            "description": "Class ID of the nth class.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "instanceid0",
            "in": "query",
            "description": "Instance ID of the nth class.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamEconomy/GetAssetPrices/v1": {
      "get": {
        "summary": "GetAssetPrices operation of ISteamEconomy",
        "description": "Performs the GetAssetPrices operation",
        "operationId": "ISteamEconomy_GetAssetPrices",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "Must be a steam economy app.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "The currency to filter for",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "The user's local language",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamNews/GetNewsForApp/v2": {
      "get": {
        "summary": "GetNewsForApp operation of ISteamNews",
        "description": "Performs the GetNewsForApp operation",
        "operationId": "ISteamNews_GetNewsForApp",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "AppID to retrieve news for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "maxlength",
            "in": "query",
            "description": "Maximum length for the content to return, if this is 0 the full content is returned, if it's less then a blurb is generated to fit.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "Retrieve posts earlier than this date (unix epoch timestamp)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "# of posts to retrieve (default 20)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "feeds",
            "in": "query",
            "description": "Comma-separated list of feed names to return news for",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Comma-separated list of tags to filter by (e.g. 'patchnodes')",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamRemoteStorage/GetCollectionDetails/v1": {
      "post": {
        "summary": "GetCollectionDetails operation of ISteamRemoteStorage",
        "description": "Performs the GetCollectionDetails operation",
        "operationId": "ISteamRemoteStorage_GetCollectionDetails",
        "parameters": [
          {
            "name": "collectioncount",
            "in": "query",
            "description": "Number of collections being requested",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "publishedfileids",
            "in": "query",
            "description": "collection ids to get the details for",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamRemoteStorage/GetPublishedFileDetails/v1": {
      "post": {
        "summary": "GetPublishedFileDetails operation of ISteamRemoteStorage",
        "description": "Performs the GetPublishedFileDetails operation",
        "operationId": "ISteamRemoteStorage_GetPublishedFileDetails",
        "parameters": [
          {
            "name": "itemcount",
            "in": "query",
            "description": "Number of items being requested",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "publishedfileids",
            "in": "query",
            "description": "published file id to look up",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamRemoteStorage/GetUGCFileDetails/v1": {
      "get": {
        "summary": "GetUGCFileDetails operation of ISteamRemoteStorage",
        "description": "Performs the GetUGCFileDetails operation",
        "operationId": "ISteamRemoteStorage_GetUGCFileDetails",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "If specified, only returns details if the file is owned by the SteamID specified",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ugcid",
            "in": "query",
            "description": "ID of UGC file to get info for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "appID of product",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamUser/GetFriendList/v1": {
      "get": {
        "summary": "GetFriendList operation of ISteamUser",
        "description": "Performs the GetFriendList operation",
        "operationId": "ISteamUser_GetFriendList",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "relationship",
            "in": "query",
            "description": "relationship type (ex: friend)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamUser/GetPlayerBans/v1": {
      "get": {
        "summary": "GetPlayerBans operation of ISteamUser",
        "description": "Performs the GetPlayerBans operation",
        "operationId": "ISteamUser_GetPlayerBans",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamids",
            "in": "query",
            "description": "Comma-delimited list of SteamIDs",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamUser/GetPlayerSummaries/v2": {
      "get": {
        "summary": "GetPlayerSummaries operation of ISteamUser",
        "description": "Performs the GetPlayerSummaries operation",
        "operationId": "ISteamUser_GetPlayerSummaries",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamids",
            "in": "query",
            "description": "Comma-delimited list of SteamIDs (max: 100)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamUser/GetUserGroupList/v1": {
      "get": {
        "summary": "GetUserGroupList operation of ISteamUser",
        "description": "Performs the GetUserGroupList operation",
        "operationId": "ISteamUser_GetUserGroupList",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamUser/ResolveVanityURL/v1": {
      "get": {
        "summary": "ResolveVanityURL operation of ISteamUser",
        "description": "Performs the ResolveVanityURL operation",
        "operationId": "ISteamUser_ResolveVanityURL",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vanityurl",
            "in": "query",
            "description": "The vanity URL to get a SteamID for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url_type",
            "in": "query",
            "description": "The type of vanity URL. 1 (default): Individual profile, 2: Group, 3: Official game group",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamUserAuth/AuthenticateUserTicket/v1": {
      "get": {
        "summary": "AuthenticateUserTicket operation of ISteamUserAuth",
        "description": "Performs the AuthenticateUserTicket operation",
        "operationId": "ISteamUserAuth_AuthenticateUserTicket",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "appid of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ticket",
            "in": "query",
            "description": "Ticket from GetAuthSessionTicket.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamUserOAuth/GetTokenDetails/v1": {
      "get": {
        "summary": "GetTokenDetails operation of ISteamUserOAuth",
        "description": "Performs the GetTokenDetails operation",
        "operationId": "ISteamUserOAuth_GetTokenDetails",
        "parameters": [
          {
            "name": "access_token",
            "in": "query",
            "description": "OAuth2 token for which to return details",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamUserStats/GetGlobalAchievementPercentagesForApp/v2": {
      "get": {
        "summary": "GetGlobalAchievementPercentagesForApp operation of ISteamUserStats",
        "description": "Performs the GetGlobalAchievementPercentagesForApp operation",
        "operationId": "ISteamUserStats_GetGlobalAchievementPercentagesForApp",
        "parameters": [
          {
            "name": "gameid",
            "in": "query",
            "description": "GameID to retrieve the achievement percentages for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamUserStats/GetGlobalStatsForGame/v1": {
      "get": {
        "summary": "GetGlobalStatsForGame operation of ISteamUserStats",
        "description": "Performs the GetGlobalStatsForGame operation",
        "operationId": "ISteamUserStats_GetGlobalStatsForGame",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "AppID that we're getting global stats for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of stats get data for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Names of stat to get data for",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Start date for daily totals (unix epoch timestamp)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "End date for daily totals (unix epoch timestamp)",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamUserStats/GetNumberOfCurrentPlayers/v1": {
      "get": {
        "summary": "GetNumberOfCurrentPlayers operation of ISteamUserStats",
        "description": "Performs the GetNumberOfCurrentPlayers operation",
        "operationId": "ISteamUserStats_GetNumberOfCurrentPlayers",
        "parameters": [
          {
            "name": "appid",
            "in": "query",
            "description": "AppID that we're getting user count for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamUserStats/GetPlayerAchievements/v1": {
      "get": {
        "summary": "GetPlayerAchievements operation of ISteamUserStats",
        "description": "Performs the GetPlayerAchievements operation",
        "operationId": "ISteamUserStats_GetPlayerAchievements",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "AppID to get achievements for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "l",
            "in": "query",
            "description": "Language to return strings for",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamUserStats/GetSchemaForGame/v2": {
      "get": {
        "summary": "GetSchemaForGame operation of ISteamUserStats",
        "description": "Performs the GetSchemaForGame operation",
        "operationId": "ISteamUserStats_GetSchemaForGame",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "appid of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "l",
            "in": "query",
            "description": "localized language to return (english, french, etc.)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamUserStats/GetUserStatsForGame/v2": {
      "get": {
        "summary": "GetUserStatsForGame operation of ISteamUserStats",
        "description": "Performs the GetUserStatsForGame operation",
        "operationId": "ISteamUserStats_GetUserStatsForGame",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "steamid",
            "in": "query",
            "description": "SteamID of user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "appid",
            "in": "query",
            "description": "appid of game",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamWebAPIUtil/GetServerInfo/v1": {
      "get": {
        "summary": "GetServerInfo operation of ISteamWebAPIUtil",
        "description": "Performs the GetServerInfo operation",
        "operationId": "ISteamWebAPIUtil_GetServerInfo",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ISteamWebAPIUtil/GetSupportedAPIList/v1": {
      "get": {
        "summary": "GetSupportedAPIList operation of ISteamWebAPIUtil",
        "description": "Performs the GetSupportedAPIList operation",
        "operationId": "ISteamWebAPIUtil_GetSupportedAPIList",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "access key",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IStoreService/GetAppList/v1": {
      "get": {
        "summary": "Gets a list of apps available on the Steam Store.",
        "description": "Performs the GetAppList operation",
        "operationId": "IStoreService_GetAppList",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "if_modified_since",
            "in": "query",
            "description": "Return only items that have been modified since this date.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "have_description_language",
            "in": "query",
            "description": "Return only items that have a description in this language.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_games",
            "in": "query",
            "description": "Include games (defaults to enabled)",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_dlc",
            "in": "query",
            "description": "Include DLC",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_software",
            "in": "query",
            "description": "Include software items",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_videos",
            "in": "query",
            "description": "Include videos and series",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_hardware",
            "in": "query",
            "description": "Include hardware",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "last_appid",
            "in": "query",
            "description": "For continuations, this is the last appid returned from the previous call.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "max_results",
            "in": "query",
            "description": "Number of results to return at a time.  Default 10k, max 50k.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ITFItems_440/GetGoldenWrenches/v2": {
      "get": {
        "summary": "GetGoldenWrenches operation of ITFItems_440",
        "description": "Performs the GetGoldenWrenches operation",
        "operationId": "ITFItems_440_GetGoldenWrenches",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ITFPromos_440/GetItemID/v1": {
      "get": {
        "summary": "GetItemID operation of ITFPromos_440",
        "description": "Performs the GetItemID operation",
        "operationId": "ITFPromos_440_GetItemID",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "The Steam ID to fetch items for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "promoid",
            "in": "query",
            "description": "The promo ID to grant an item for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ITFPromos_440/GrantItem/v1": {
      "post": {
        "summary": "GrantItem operation of ITFPromos_440",
        "description": "Performs the GrantItem operation",
        "operationId": "ITFPromos_440_GrantItem",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "The Steam ID to fetch items for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "promoid",
            "in": "query",
            "description": "The promo ID to grant an item for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ITFPromos_620/GetItemID/v1": {
      "get": {
        "summary": "GetItemID operation of ITFPromos_620",
        "description": "Performs the GetItemID operation",
        "operationId": "ITFPromos_620_GetItemID",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "The Steam ID to fetch items for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "PromoID",
            "in": "query",
            "description": "The promo ID to grant an item for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ITFPromos_620/GrantItem/v1": {
      "post": {
        "summary": "GrantItem operation of ITFPromos_620",
        "description": "Performs the GrantItem operation",
        "operationId": "ITFPromos_620_GrantItem",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "description": "The Steam ID to fetch items for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "PromoID",
            "in": "query",
            "description": "The promo ID to grant an item for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/ITFSystem_440/GetWorldStatus/v1": {
      "get": {
        "summary": "GetWorldStatus operation of ITFSystem_440",
        "description": "Performs the GetWorldStatus operation",
        "operationId": "ITFSystem_440_GetWorldStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IWishlistService/GetWishlist/v1": {
      "get": {
        "summary": "Get a user's wishlist.",
        "description": "Performs the GetWishlist operation",
        "operationId": "IWishlistService_GetWishlist",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IWishlistService/GetWishlistItemCount/v1": {
      "get": {
        "summary": "Get the number of items on a user's wishlist.",
        "description": "Performs the GetWishlistItemCount operation",
        "operationId": "IWishlistService_GetWishlistItemCount",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/IWishlistService/GetWishlistSortedFiltered/v1": {
      "get": {
        "summary": "Get a user's paginated wishlist applying various sorts and filters",
        "description": "Performs the GetWishlistSortedFiltered operation",
        "operationId": "IWishlistService_GetWishlistSortedFiltered",
        "parameters": [
          {
            "name": "steamid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "context",
            "in": "query",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "data_request",
            "in": "query",
            "description": "If passed, item data will be returned",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "{enum}"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "required": true,
            "schema": {
              "type": "{message}"
            }
          },
          {
            "name": "start_index",
            "in": "query",
            "description": "Data in this range will be filled in with StoreBrowse data",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api.steampowered.com"
    }
  ]
}
